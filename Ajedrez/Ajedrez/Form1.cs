using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace WindowsFormsApplication1
{
    public partial class Ajedrez : Form
    {
        public int[,] matriz , matriz2, matriz3; //Declaracion de las matrices

        public int CNREY = 4, FNREY = 0; //se declaran las variables usadas para mantener conocimiento de la posicion del rey negro
        public int CBREY = 4, FBREY = 7; //se declaran las variables usadas para mantener conocimiento de la posicion del rey negro

        public int JN = 0; // funcion que simboliza el jaque
        
        
        public int PB1, PB2, PB3, PB4, PB5, PB6, PB7, PB8; //Valor del doble paso inicial para los peones blancos
        public int PN1, PN2, PN3, PN4, PN5, PN6, PN7, PN8; //Valor del doble paso inicial para los peones blancos

        public int SA1 = 0, SA2 = 0, SA3 = 0, SA4 = 0, SA5 = 0, SA6 = 0, SA7 = 0, SA8 = 0; //Valores utilizados para comprobar si se dio clic antes en los botones de la columna A
        public int SB1 = 0, SB2 = 0, SB3 = 0, SB4 = 0, SB5 = 0, SB6 = 0, SB7 = 0, SB8 = 0; //Valores utilizados para comprobar si se dio clic antes en los botones de la columna B
        public int SC1 = 0, SC2 = 0, SC3 = 0, SC4 = 0, SC5 = 0, SC6 = 0, SC7 = 0, SC8 = 0; //Valores utilizados para comprobar si se dio clic antes en los botones de la columna C
        public int SD1 = 0, SD2 = 0, SD3 = 0, SD4 = 0, SD5 = 0, SD6 = 0, SD7 = 0, SD8 = 0; //Valores utilizados para comprobar si se dio clic antes en los botones de la columna D
        public int SE1 = 0, SE2 = 0, SE3 = 0, SE4 = 0, SE5 = 0, SE6 = 0, SE7 = 0, SE8 = 0; //Valores utilizados para comprobar si se dio clic antes en los botones de la columna E
        public int SF1 = 0, SF2 = 0, SF3 = 0, SF4 = 0, SF5 = 0, SF6 = 0, SF7 = 0, SF8 = 0; //Valores utilizados para comprobar si se dio clic antes en los botones de la columna F
        public int SG1 = 0, SG2 = 0, SG3 = 0, SG4 = 0, SG5 = 0, SG6 = 0, SG7 = 0, SG8 = 0; //Valores utilizados para comprobar si se dio clic antes en los botones de la columna G
        public int SH1 = 0, SH2 = 0, SH3 = 0, SH4 = 0, SH5 = 0, SH6 = 0, SH7 = 0, SH8 = 0; //Valores utilizados para comprobar si se dio clic antes en los botones de la columna H


        public int PB1U = 1, PB2U = 1, PB3U = 1, PB4U = 1, PB5U = 1, PB6U = 1, PB7U = 1, PB8U = 1; //Valor del doble paso inicial para los peones blancos
        public int PN1U = 1, PN2U = 1, PN3U = 1, PN4U = 1, PN5U = 1, PN6U = 1, PN7U = 1, PN8U = 1; //Valor del doble paso inicial para los peones blancos

        
        public int FS,FP,CS,CP; //Coordenadas utilizadas para cambiar el fondo en la parte visual por medio de funcion y usadas para todos los calculos de las funciones

        public int Turno = 1, SeleccionB, SeleccionN, Pieza, MR, MR2; //Variables de seleccion turno y pieza 

        public int TN1U = 1, TN2U = 1, TB1U = 1, TB2U = 1; // variables utilizadas para el calculo del enroque en caso de torres (usos de la torre ya que es necesario que no se haya movido)
        public int RNU = 1, RBU = 1;// variables utilizadas para el calculo del enroque en caso de rey(usos ya que el rey no se debe haber movido)
        public int ERQ = 1; // variable que comprueba si hay espacio para realizar el enrroque



        public Ajedrez()
        
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            //declaracion y llenado de la matriz con valores de 0
            //para su posterior cambio por los valores de las fichas
            matriz = new int[8, 8];
            matriz2 = new int[8, 8];
            matriz3 = new int[8, 8];
            for (int f = 0; f < 8; f++)
            {
                for (int c = 0; c < 8; c++)
                {
                    matriz[f, c] = 0;
                    matriz2[f, c] = 0;
                }
            }

            //campos en la matriz para los arfiles torres rey y reina
            //negros
            matriz[0, 0] = 1; //Torre
            matriz[0, 1] = 2; //Caballo
            matriz[0, 2] = 3; //Arfil
            matriz[0, 3] = 4; //Reina
            matriz[0, 4] = 5; //Rey
            matriz[0, 5] = 6; //Arfil
            matriz[0, 6] = 7; //Caballo
            matriz[0, 7] = 8; //Torre


            //blancas
            matriz[7, 0] = 21; //Torre
            matriz[7, 1] = 22; //Caballo
            matriz[7, 2] = 23; //Arfil
            matriz[7, 3] = 24; //Reina
            matriz[7, 4] = 25; //Rey
            matriz[7, 5] = 26; //Arfil
            matriz[7, 6] = 27; //Caballo
            matriz[7, 7] = 28; //Torre


            //campo en matriz para peones
            //negros
            matriz[1, 0] = 11;
            matriz[1, 1] = 12;
            matriz[1, 2] = 13;
            matriz[1, 3] = 14;
            matriz[1, 4] = 15;
            matriz[1, 5] = 16;
            matriz[1, 6] = 17;
            matriz[1, 7] = 18;




            //blancas
            matriz[6, 0] = 31;
            matriz[6, 1] = 32;
            matriz[6, 2] = 33;
            matriz[6, 3] = 34;
            matriz[6, 4] = 35;
            matriz[6, 5] = 36;
            matriz[6, 6] = 37;
            matriz[6, 7] = 38;



            //numero para piezas dependiendo de piezas
            //negros
            matriz2[0, 0] = 1; //Torre
            matriz2[0, 1] = 1; //Caballo
            matriz2[0, 2] = 1; //Arfil
            matriz2[0, 3] = 1; //Reina
            matriz2[0, 4] = 1; //Rey
            matriz2[0, 5] = 1; //Arfil
            matriz2[0, 6] = 1; //Caballo
            matriz2[0, 7] = 1; //Torre


            //blancas
            matriz2[7, 0] = 2; //Torre
            matriz2[7, 1] = 2; //Caballo
            matriz2[7, 2] = 2; //Arfil
            matriz2[7, 3] = 2; //Reina
            matriz2[7, 4] = 2; //Rey
            matriz2[7, 5] = 2; //Arfil
            matriz2[7, 6] = 2; //Caballo
            matriz2[7, 7] = 2; //Torre


            //numero para piezas dependiendo de piezas
            //negros
            matriz2[1, 0] = 1;
            matriz2[1, 1] = 1;
            matriz2[1, 2] = 1;
            matriz2[1, 3] = 1;
            matriz2[1, 4] = 1;
            matriz2[1, 5] = 1;
            matriz2[1, 6] = 1;
            matriz2[1, 7] = 1;

            //blancas
            matriz2[6, 0] = 2;
            matriz2[6, 1] = 2;
            matriz2[6, 2] = 2;
            matriz2[6, 3] = 2;
            matriz2[6, 4] = 2;
            matriz2[6, 5] = 2;
            matriz2[6, 6] = 2;
            matriz2[6, 7] = 2;
        }
        public void Comprobar() //Funcion para la comprobacion de las piezas
        {


            switch (matriz[FP, CP])
            {
                case 0://Espacio vacio
                    break;
                case 1:// Torre 1 negra
                    int TMV1 = 1; //Variable usada para calcular si es posible el movimiento de la torre en vertical
                    int TMH1 = 1; //Variable usada para calcular si es posible el movimiento de la torre en horizontal


                    if (CS == CP) //Analiza la posibilidad de haber realizado un movimiento en vertical
                    {
                        if (FP < FS) // analiza si el movimiente es hacia adelante
                        {
                            for (int PV = FP; PV < FS; PV++) // analiza los espacios con cero que hay hacia adelante de la torre
                            {
                                if (matriz[PV, CP] != 0 && matriz[PV, CP] != 1) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0

                                {
                                    TMV1 = 0;//se asigna cero de manera que no es posible un movimiento
                                }
                            }
                            if (TMV1 == 1)// si es 1 se puede lograr un movimiento
                            {
                                TN1U = 0;
                                MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                                MR2 = matriz2[FP, CP];//igual con la matriz 2
                                matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                                matriz2[FP, CP] = 0;//igual con la matriz 2
                                matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                                matriz2[FS, CS] = MR2;//igual con la matriz 2
                                Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                                imagenes();
                                break;
                            }
                            if (TMV1 == 0)//como es 0 es imposible lograr un movimiento
                            {
                                Limpiar();
                                MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                                break;

                            }
                        }
                        if (FP > FS)
                        {
                            for (int PV = FP; PV > FS; PV--) // analiza los espacios con cero que hay hacia adelante de la torre
                            {
                                if (matriz[PV, CP] != 0 && matriz[PV, CP] != 1) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                                {
                                    TMV1 = 0;//se asigna cero de manera que no es posible un movimiento
                                }
                            }
                            if (TMV1 == 1)// si es 1 se puede lograr un movimiento
                            {
                                TN1U = 0;
                                MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                                MR2 = matriz2[FP, CP];//igual con la matriz 2
                                matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                                matriz2[FP, CP] = 0;//igual con la matriz 2
                                matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                                matriz2[FS, CS] = MR2;//igual con la matriz 2
                                Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                                imagenes();
                                break;
                            }
                            if (TMV1 == 0)//como es 0 es imposible lograr un movimiento
                            {
                                Limpiar();
                                MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                                break;

                            }
                        }
                    }



                    if (FS == FP)
                    {
                        if (CP < CS) // analiza si el movimiente es hacia la derecha
                        {
                            for (int PH = CP; PH < CS; PH++) // analiza los espacios con cero que hay hacia adelante de la torre
                            {
                                if (matriz[FP, PH] != 0 && matriz[FP, PH] != 1) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                                {
                                    TMH1 = 0;//se asigna cero de manera que no es posible un movimiento
                                }
                            }
                            if (TMH1 == 1)// si es 1 se puede lograr un movimiento
                            {
                                TN1U = 0;
                                MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                                MR2 = matriz2[FP, CP];//igual con la matriz 2
                                matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                                matriz2[FP, CP] = 0;//igual con la matriz 2
                                matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                                matriz2[FS, CS] = MR2;//igual con la matriz 2
                                Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                                imagenes();
                                break;
                            }
                            if (TMH1 == 0)//como es 0 es imposible lograr un movimiento
                            {
                                Limpiar();
                                MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                                break;

                            }
                        }
                        if (CP > CS)// analiza si el movimiente es hacia la izquierda
                        {
                            for (int PH = CP; PH > CS; PH--) // analiza los espacios con cero que hay hacia adelante de la torre
                            {
                                if (matriz[FP, PH] != 0 && matriz[FP, PH] != 1) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                                {
                                    TMH1 = 0;//se asigna cero de manera que no es posible un movimiento
                                }
                            }
                            if (TMH1 == 1)// si es 1 se puede lograr un movimiento
                            {
                                TN1U = 0;
                                MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                                MR2 = matriz2[FP, CP];//igual con la matriz 2
                                matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                                matriz2[FP, CP] = 0;//igual con la matriz 2
                                matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                                matriz2[FS, CS] = MR2;//igual con la matriz 2
                                Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                                imagenes();
                                break;
                            }
                            if (TMH1 == 0)//como es 0 es imposible lograr un movimiento
                            {
                                Limpiar();
                                MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                                break;

                            }
                        }
                    }
                    if (CS != CP && FS != FP)
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        break;

                    }

                    break;
                case 2:// caballo negro
                    if (((FP - 2 == FS && CP - 1 == CS) || (FP - 2 == FS && CP + 1 == CS) || (CP - 2 == CS && FP - 1 == FS) || (CP - 2 == CS && FP + 1 == FS) || (FP + 2 == FS && CP - 1 == CS) || (FP + 2 == FS && CP + 1 == CS) || (CP + 2 == CS && FP - 1 == FS) || (CP + 2 == CS && FP + 1 == FS)))//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                    { //Comer de abajo para arriba y de izquierda a derecha                  //Comer de derecha a izquierda y de abajo para arriba               //Comer de arriba para abajo y de derecha para izquierda            //Comer de izquierda a derecha y de arriba para abajo
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    else
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        break;
                    }
                case 3://arfil negro 1
                    int A1D1 = 1; //Variable usada para calcular si es posible el movimiento del arfil en diagonal

                    if (FP < FS && CP < CS) // analiza si el movimiente es hacia adelante
                    {
                        for (int CD1 = CP, FD1 = FP; CD1 <= CS && FD1 <= FS; CD1++, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                            {
                                A1D1 = 1;//se asigna 1 ya que seria posible el movimiento
                            }
                            else
                            {
                                A1D1 = 0;//si la diagonal es diferente se coloca 0
                            }

                        }
                        for (int CD1 = CP , FD1 = FP; CD1 < CS && FD1 < FS; CD1++, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (matriz[FD1, CD1] != 0 && matriz[FD1, CD1] != 3) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                A1D1 = 0;//se asigna cero de manera que no es posible un movimiento
                            }

                        }
                        if (A1D1 == 1)// si es 1 se puede lograr un movimiento
                        {
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            imagenes();
                            break;
                        }
                        if (A1D1 == 0)//como es 0 es imposible lograr un movimiento
                        {
                            Limpiar();
                            MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;

                        }
                    }
                    if (FP > FS && CP > CS) // analiza si el movimiente es hacia adelante
                    {

                        for (int CD1 = CP, FD1 = FP; CD1 >= CS && FD1 >= FS; CD1--, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                            {
                                A1D1 = 1;//se asigna 1 ya que seria posible el movimiento
                            }
                            else
                            {
                                A1D1 = 0;//si la diagonal es diferente se coloca 0
                            }

                        }
                        for (int CD1 = CP, FD1 = FP; CD1 > CS && FD1 > FS; CD1--, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[FD1, CD1] != 0 && matriz[FD1, CD1] != 3) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                A1D1 = 0;//se asigna cero de manera que no es posible un movimiento
                            }

                        }
                        if (A1D1 == 1)// si es 1 se puede lograr un movimiento
                        {
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            imagenes();
                            break;
                        }
                        if (A1D1 == 0)//como es 0 es imposible lograr un movimiento
                        {
                            Limpiar();
                            MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;

                        }
                    }
                    if (FP < FS && CP > CS) // analiza si el movimiente es hacia adelante
                    {
                        for (int CD1 = CP, FD1 = FP; CD1 >= CS && FD1 <= FS; CD1--, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                            {
                                A1D1 = 1;//se asigna 1 ya que seria posible el movimiento
                            }
                            else
                            {
                                A1D1 = 0;//si la diagonal es diferente se coloca 0
                            }

                        }
                        for (int CD1 = CP, FD1 = FP; CD1 > CS && FD1 < FS; CD1--, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[FD1, CD1] != 0 && matriz[FD1, CD1] != 3) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                A1D1 = 0;//se asigna cero de manera que no es posible un movimiento
                            }

                        }
                        if (A1D1 == 1)// si es 1 se puede lograr un movimiento
                        {
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            imagenes();
                            break;
                        }
                        if (A1D1 == 0)//como es 0 es imposible lograr un movimiento
                        {
                            Limpiar();
                            MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;

                        }
                    }
                    if (FP > FS && CP < CS) // analiza si el movimiente es hacia adelante
                    {
                        for (int CD1 = CP, FD1 = FP; CD1 <= CS && FD1 >= FS; CD1++, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                            {
                                A1D1 = 1;//se asigna 1 ya que seria posible el movimiento
                            }
                            else
                            {
                                A1D1 = 0;//si la diagonal es diferente se coloca 0
                            }

                        }
                        for (int CD1 = CP, FD1 = FP; CD1 < CS && FD1 > FS; CD1++, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[FD1, CD1] != 0 && matriz[FD1, CD1] != 3) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                A1D1 = 0;//se asigna cero de manera que no es posible un movimiento
                            }

                        }
                        if (A1D1 == 1)// si es 1 se puede lograr un movimiento
                        {
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            imagenes();
                            break;
                        }
                        if (A1D1 == 0)//como es 0 es imposible lograr un movimiento
                        {
                            Limpiar();
                            MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;

                        }
                    }
                    break;
                case 4:// reina
                    //Funciones para realizar movimientos en diagonal en la Reina
                    int RM = 1; //Variable usada para calcular si es posible el movimiento En diagonal 

                    if (FP < FS && CP < CS) // analiza si el movimiente es hacia adelante
                    {
                        for (int CD1 = CP, FD1 = FP; CD1 <= CS && FD1 <= FS; CD1++, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                            {
                                RM = 1;//se asigna 1 ya que seria posible el movimiento
                            }
                            else
                            {
                                RM = 0;//si la diagonal es diferente se coloca 0
                            }

                        }
                        for (int CD1 = CP , FD1 = FP; CD1 < CS && FD1 < FS; CD1++, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (matriz[FD1, CD1] != 0 && matriz[FD1, CD1] != 4) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                RM = 0;//se asigna cero de manera que no es posible un movimiento
                            }

                        }
                        if (RM == 1)// si es 1 se puede lograr un movimiento
                        {
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            imagenes();
                            break;
                        }
                        if (RM == 0)//como es 0 es imposible lograr un movimiento
                        {
                            Limpiar();
                            MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;

                        }
                    }
                    if (FP > FS && CP > CS) // analiza si el movimiente es hacia adelante
                    {

                        for (int CD1 = CP, FD1 = FP; CD1 >= CS && FD1 >= FS; CD1--, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                            {
                                RM = 1;//se asigna 1 ya que seria posible el movimiento
                            }
                            else
                            {
                                RM = 0;//si la diagonal es diferente se coloca 0
                            }

                        }
                        for (int CD1 = CP, FD1 = FP; CD1 > CS && FD1 > FS; CD1--, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[FD1, CD1] != 0 && matriz[FD1, CD1] != 4) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                RM = 0;//se asigna cero de manera que no es posible un movimiento
                            }

                        }
                        if (RM == 1)// si es 1 se puede lograr un movimiento
                        {
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            imagenes();
                            break;
                        }
                        if (RM == 0)//como es 0 es imposible lograr un movimiento
                        {
                            Limpiar();
                            MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;

                        }
                    }
                    if (FP < FS && CP > CS) // analiza si el movimiente es hacia adelante
                    {
                        for (int CD1 = CP, FD1 = FP; CD1 >= CS && FD1 <= FS; CD1--, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                            {
                                RM = 1;//se asigna 1 ya que seria posible el movimiento
                            }
                            else
                            {
                                RM = 0;//si la diagonal es diferente se coloca 0
                            }

                        }
                        for (int CD1 = CP, FD1 = FP; CD1 > CS && FD1 < FS; CD1--, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[FD1, CD1] != 0 && matriz[FD1, CD1] != 4) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                RM = 0;//se asigna cero de manera que no es posible un movimiento
                            }

                        }
                        if (RM == 1)// si es 1 se puede lograr un movimiento
                        {
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            imagenes();
                            break;
                        }
                        if (RM == 0)//como es 0 es imposible lograr un movimiento
                        {
                            Limpiar();
                            MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;

                        }
                    }
                    if (FP > FS && CP < CS) // analiza si el movimiente es hacia adelante
                    {
                        for (int CD1 = CP, FD1 = FP; CD1 <= CS && FD1 >= FS; CD1++, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                            {
                                RM = 1;//se asigna 1 ya que seria posible el movimiento
                            }
                            else
                            {
                                RM = 0;//si la diagonal es diferente se coloca 0
                            }

                        }
                        for (int CD1 = CP, FD1 = FP; CD1 < CS && FD1 > FS; CD1++, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[FD1, CD1] != 0 && matriz[FD1, CD1] != 4) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                RM = 0;//se asigna cero de manera que no es posible un movimiento
                            }

                        }
                        if (RM == 1)// si es 1 se puede lograr un movimiento
                        {
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            imagenes();
                            break;
                        }
                        if (RM == 0)//como es 0 es imposible lograr un movimiento
                        {
                            Limpiar();
                            MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;

                        }
                    }
                    //Funciones para hacer movimientos en Horizontal con la reina
                    int RMV = 1; //Variable usada para calcular si es posible el movimiento de la torre en vertical
                    int RMH = 1; //Variable usada para calcular si es posible el movimiento de la torre en horizontal


                    if (CS == CP) //Analiza la posibilidad de haber realizado un movimiento en vertical
                    {
                        if (FP < FS) // analiza si el movimiente es hacia adelante
                        {
                            for (int PV = FP; PV < FS; PV++) // analiza los espacios con cero que hay hacia adelante de la torre
                            {
                                if (matriz[PV, CP] != 0 && matriz[PV, CP] != 4) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                                {
                                    RMV = 0;//se asigna cero de manera que no es posible un movimiento
                                }
                            }
                            if (RMV == 1)// si es 1 se puede lograr un movimiento
                            {
                                MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                                MR2 = matriz2[FP, CP];//igual con la matriz 2
                                matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                                matriz2[FP, CP] = 0;//igual con la matriz 2
                                matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                                matriz2[FS, CS] = MR2;//igual con la matriz 2
                                Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                                imagenes();
                                break;
                            }
                            if (RMV == 0)//como es 0 es imposible lograr un movimiento
                            {
                                Limpiar();
                                MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                                break;

                            }
                        }
                        if (FP > FS)
                        {
                            for (int PV = FP; PV > FS; PV--) // analiza los espacios con cero que hay hacia adelante de la torre
                            {
                                if (matriz[PV, CP] != 0 && matriz[PV, CP] != 4) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                                {
                                    RMV = 0;//se asigna cero de manera que no es posible un movimiento
                                }
                            }
                            if (RMV == 1)// si es 1 se puede lograr un movimiento
                            {
                                MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                                MR2 = matriz2[FP, CP];//igual con la matriz 2
                                matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                                matriz2[FP, CP] = 0;//igual con la matriz 2
                                matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                                matriz2[FS, CS] = MR2;//igual con la matriz 2
                                Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                                imagenes();
                                break;
                            }
                            if (RMV == 0)//como es 0 es imposible lograr un movimiento
                            {
                                Limpiar();
                                MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                                break;

                            }
                        }
                    }



                    if (FS == FP)
                    {
                        if (CP < CS) // analiza si el movimiente es hacia la derecha
                        {
                            for (int PH = CP; PH < CS; PH++) // analiza los espacios con cero que hay hacia adelante de la torre
                            {
                                if (matriz[FP, PH] != 0 && matriz[FP, PH] != 4) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                                {
                                    RMH = 0;//se asigna cero de manera que no es posible un movimiento
                                }
                            }
                            if (RMH == 1)// si es 1 se puede lograr un movimiento
                            {
                                MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                                MR2 = matriz2[FP, CP];//igual con la matriz 2
                                matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                                matriz2[FP, CP] = 0;//igual con la matriz 2
                                matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                                matriz2[FS, CS] = MR2;//igual con la matriz 2
                                Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                                imagenes();
                                break;
                            }
                            if (RMH == 0)//como es 0 es imposible lograr un movimiento
                            {
                                Limpiar();
                                MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                                break;

                            }
                        }
                        if (CP > CS)// analiza si el movimiente es hacia la izquierda
                        {
                            for (int PH = CP; PH > CS; PH--) // analiza los espacios con cero que hay hacia adelante de la torre
                            {
                                if (matriz[FP, PH] != 0 && matriz[FP, PH] != 4) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                                {
                                    RMH = 0;//se asigna cero de manera que no es posible un movimiento
                                }
                            }
                            if (RMH == 1)// si es 1 se puede lograr un movimiento
                            {
                                MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                                MR2 = matriz2[FP, CP];//igual con la matriz 2
                                matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                                matriz2[FP, CP] = 0;//igual con la matriz 2
                                matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                                matriz2[FS, CS] = MR2;//igual con la matriz 2
                                Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                                imagenes();
                                break;
                            }
                            if (RMH == 0)//como es 0 es imposible lograr un movimiento
                            {
                                Limpiar();
                                MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                                break;

                            }
                        }
                    }
                    if (CS != CP && FS != FP)
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        break;

                    }
                    break;
                case 5://REY 1 NEGRO
                    if (((CP + 1 == CS && FP == FS) || (CP - 1 == CS && FP == FS) || (FP + 1 == FS && CP == CS) || (FP - 1 == FS && CP == CS))) //funcion usada para mover el rey en movimientos de 1
                    {
                        RNU = 0;
                        CNREY = CS;
                        FNREY = FS;
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (((CP + 1 == CS) && (FP + 1 == FS || FP - 1 == FS)) || ((CP - 1 == CS) && (FP + 1 == FS || FP - 1 == FS)))
                    {
                        RNU = 0;
                        CNREY = CS;
                        FNREY = FS;
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (CS == 2 && FP == FS && TN1U == 1 && RNU == 1)//enrroque largo
                    {
                        for (int C = 3; C > 0; C--)//se calcula si no hay piezas entre la torre y el rey
                        {
                            if (matriz[0, C] != 0)//si hay alguna pieza se impide el enrroque
                            {
                                ERQ = 0;//se cambia el valor de ERQ de manera que se cancela el enrroque
                            }
                        }
                        if (ERQ == 1)//si no hay piezas entre la torre y el rey el enrroque se realiza
                        {
                            //se cambia el la posicion del rey
                            RNU = 0;
                            TN1U = 0;
                            CNREY = CS;
                            FNREY = FS;
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            //se cambia la posicion de la torre
                            MR = matriz[0, 0];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[0, 0];//igual con la matriz 2
                            matriz[0, 0] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[0, 0] = 0;//igual con la matriz 2
                            matriz[0, 3] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[0, 3] = MR2;//igual con la matriz 2

                            imagenes();
                            break;
                        }
                        else//si hay piezas entre el rey y la torre se impide el enrroque
                        {
                            Limpiar();
                            MessageBox.Show("No es posible realizar el enrroque");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;
                        }
                    }
                    if (CS == 6 && FP == FS && TN2U == 1 && RNU == 1)
                    {
                        for (int C = 5; C < 7; C++)
                        {
                            if (matriz[0, C] != 0)
                            {
                                ERQ = 0;
                            }
                        }
                        if (ERQ == 1)
                        {
                            RNU = 0;
                            TN2U = 0;
                            CNREY = CS;
                            FNREY = FS;
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza

                            MR = matriz[0, 0];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[0, 0];//igual con la matriz 2
                            matriz[0, 7] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[0, 7] = 0;//igual con la matriz 2
                            matriz[0, 5] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[0, 5] = MR2;//igual con la matriz 2

                            imagenes();
                            break;
                        }
                        else//si hay piezas entre el rey y la torre se impide el enrroque
                        {
                            Limpiar();
                            MessageBox.Show("No es posible realizar el enrroque");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;
                        }

                    }
                    else
                    {
                        Limpiar();
                        MessageBox.Show("No es posible realizar el enrroque");//Se muestra un mensaje de Alerta por movimiento invalido
                        break;
                    }
                case 6://arfil negro 2
                    int A1D2 = 1; //Variable usada para calcular si es posible el movimiento de la torre en vertical

                    if (FP < FS && CP < CS) // analiza si el movimiente es hacia adelante
                    {
                        for (int CD1 = CP, FD1 = FP; CD1 <= CS && FD1 <= FS; CD1++, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                            {
                                A1D2 = 1;//se asigna 1 ya que seria posible el movimiento
                            }
                            else
                            {
                                A1D2 = 0;//si la diagonal es diferente se coloca 0
                            }

                        }
                        for (int CD1 = CP , FD1 = FP; CD1 < CS && FD1 < FS; CD1++, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (matriz[FD1, CD1] != 0 && matriz[FD1, CD1] != 6) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                A1D2 = 0;//se asigna cero de manera que no es posible un movimiento
                            }

                        }
                        if (A1D2 == 1)// si es 1 se puede lograr un movimiento
                        {
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            imagenes();
                            break;
                        }
                        if (A1D2 == 0)//como es 0 es imposible lograr un movimiento
                        {
                            Limpiar();
                            MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;

                        }
                    }
                    if (FP > FS && CP > CS) // analiza si el movimiente es hacia adelante
                    {

                        for (int CD1 = CP, FD1 = FP; CD1 >= CS && FD1 >= FS; CD1--, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                            {
                                A1D2 = 1;//se asigna 1 ya que seria posible el movimiento
                            }
                            else
                            {
                                A1D2 = 0;//si la diagonal es diferente se coloca 0
                            }

                        }
                        for (int CD1 = CP, FD1 = FP; CD1 > CS && FD1 > FS; CD1--, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[FD1, CD1] != 0 && matriz[FD1, CD1] != 6) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                A1D2 = 0;//se asigna cero de manera que no es posible un movimiento
                            }

                        }
                        if (A1D2 == 1)// si es 1 se puede lograr un movimiento
                        {
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            imagenes();
                            break;
                        }
                        if (A1D2 == 0)//como es 0 es imposible lograr un movimiento
                        {
                            Limpiar();
                            MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;

                        }
                    }
                    if (FP < FS && CP > CS) // analiza si el movimiente es hacia adelante
                    {
                        for (int CD1 = CP, FD1 = FP; CD1 >= CS && FD1 <= FS; CD1--, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                            {
                                A1D2 = 1;//se asigna 1 ya que seria posible el movimiento
                            }
                            else
                            {
                                A1D2 = 0;//si la diagonal es diferente se coloca 0
                            }

                        }
                        for (int CD1 = CP, FD1 = FP; CD1 > CS && FD1 < FS; CD1--, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[FD1, CD1] != 0 && matriz[FD1, CD1] != 6) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                A1D2 = 0;//se asigna cero de manera que no es posible un movimiento
                            }

                        }
                        if (A1D2 == 1)// si es 1 se puede lograr un movimiento
                        {
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            imagenes();
                            break;
                        }
                        if (A1D2 == 0)//como es 0 es imposible lograr un movimiento
                        {
                            Limpiar();
                            MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;

                        }
                    }
                    if (FP > FS && CP < CS) // analiza si el movimiente es hacia adelante
                    {
                        for (int CD1 = CP, FD1 = FP; CD1 <= CS && FD1 >= FS; CD1++, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                            {
                                A1D2 = 1;//se asigna 1 ya que seria posible el movimiento
                            }
                            else
                            {
                                A1D2 = 0;//si la diagonal es diferente se coloca 0
                            }

                        }
                        for (int CD1 = CP, FD1 = FP; CD1 < CS && FD1 > FS; CD1++, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[FD1, CD1] != 0 && matriz[FD1, CD1] != 6) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                A1D2 = 0;//se asigna cero de manera que no es posible un movimiento
                            }

                        }
                        if (A1D2 == 1)// si es 1 se puede lograr un movimiento
                        {
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            imagenes();
                            break;
                        }
                        if (A1D2 == 0)//como es 0 es imposible lograr un movimiento
                        {
                            Limpiar();
                            MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;

                        }
                    }
                    break;
                case 7://caballo Negro
                    if (((FP - 2 == FS && CP - 1 == CS) || (FP - 2 == FS && CP + 1 == CS) || (CP - 2 == CS && FP - 1 == FS) || (CP - 2 == CS && FP + 1 == FS) || (FP + 2 == FS && CP - 1 == CS) || (FP + 2 == FS && CP + 1 == CS) || (CP + 2 == CS && FP - 1 == FS) || (CP + 2 == CS && FP + 1 == FS)))//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                    { //Comer de abajo para arriba y de izquierda a derecha                  //Comer de derecha a izquierda y de abajo para arriba               //Comer de arriba para abajo y de derecha para izquierda            //Comer de izquierda a derecha y de arriba para abajo
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    else
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        break;
                    }
                case 8://torre 2 negra
                    int TMV2 = 1; //Variable usada para calcular si es posible el movimiento de la torre en vertical
                    int TMH2 = 1; //Variable usada para calcular si es posible el movimiento de la torre en horizontal


                    if (CS == CP) //Analiza la posibilidad de haber realizado un movimiento en vertical
                    {
                        if (FP < FS) // analiza si el movimiente es hacia adelante
                        {
                            for (int PV = FP; PV < FS; PV++) // analiza los espacios con cero que hay hacia adelante de la torre
                            {
                                if (matriz[PV, CP] != 0 && matriz[PV, CP] != 8) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                                {
                                    TMV2 = 0;//se asigna cero de manera que no es posible un movimiento
                                }
                            }
                            if (TMV2 == 1)// si es 1 se puede lograr un movimiento
                            {
                                TN2U = 0;
                                MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                                MR2 = matriz2[FP, CP];//igual con la matriz 2
                                matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                                matriz2[FP, CP] = 0;//igual con la matriz 2
                                matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                                matriz2[FS, CS] = MR2;//igual con la matriz 2
                                Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                                imagenes();
                                break;
                            }
                            if (TMV2 == 0)//como es 0 es imposible lograr un movimiento
                            {
                                Limpiar();
                                MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                                break;

                            }
                        }
                        if (FP > FS)
                        {
                            for (int PV = FP; PV > FS; PV--) // analiza los espacios con cero que hay hacia adelante de la torre
                            {
                                if (matriz[PV, CP] != 0 && matriz[PV, CP] != 8) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                                {
                                    TMV2 = 0;//se asigna cero de manera que no es posible un movimiento
                                }
                            }
                            if (TMV2 == 1)// si es 1 se puede lograr un movimiento
                            {
                                TN2U = 0;
                                MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                                MR2 = matriz2[FP, CP];//igual con la matriz 2
                                matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                                matriz2[FP, CP] = 0;//igual con la matriz 2
                                matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                                matriz2[FS, CS] = MR2;//igual con la matriz 2
                                Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                                imagenes();
                                break;
                            }
                            if (TMV2 == 0)//como es 0 es imposible lograr un movimiento
                            {
                                Limpiar();
                                MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                                break;

                            }
                        }
                    }



                    if (FS == FP)
                    {
                        if (CP < CS) // analiza si el movimiente es hacia la derecha
                        {
                            for (int PH = CP; PH < CS; PH++) // analiza los espacios con cero que hay hacia adelante de la torre
                            {
                                if (matriz[FP, PH] != 0 && matriz[FP, PH] != 8) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                                {
                                    TMH2 = 0;//se asigna cero de manera que no es posible un movimiento
                                }
                            }
                            if (TMH2 == 1)// si es 1 se puede lograr un movimiento
                            {
                                TN2U = 0;
                                MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                                MR2 = matriz2[FP, CP];//igual con la matriz 2
                                matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                                matriz2[FP, CP] = 0;//igual con la matriz 2
                                matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                                matriz2[FS, CS] = MR2;//igual con la matriz 2
                                Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                                imagenes();
                                break;
                            }
                            if (TMH2 == 0)//como es 0 es imposible lograr un movimiento
                            {
                                Limpiar();
                                MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                                break;

                            }
                        }
                        if (CP > CS)// analiza si el movimiente es hacia la izquierda
                        {
                            for (int PH = CP; PH > CS; PH--) // analiza los espacios con cero que hay hacia adelante de la torre
                            {
                                if (matriz[FP, PH] != 0 && matriz[FP, PH] != 8) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                                {
                                    TMH2 = 0;//se asigna cero de manera que no es posible un movimiento
                                }
                            }
                            if (TMH2 == 1)// si es 1 se puede lograr un movimiento
                            {
                                TN2U = 0;
                                MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                                MR2 = matriz2[FP, CP];//igual con la matriz 2
                                matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                                matriz2[FP, CP] = 0;//igual con la matriz 2
                                matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                                matriz2[FS, CS] = MR2;//igual con la matriz 2
                                Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                                imagenes();
                                break;
                            }
                            if (TMH2 == 0)//como es 0 es imposible lograr un movimiento
                            {
                                Limpiar();
                                MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                                break;

                            }
                        }
                    }
                    if (CS != CP && FS != FP)
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        break;

                    }

                    break;





                case 11: //Peon negro numero 1
                    if ((FP + 1 == FS && CP - 1 == CS || FP + 1 == FS && CP + 1 == CS) && matriz[FS, CS] != 0)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                    {
                        PN1U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP + 2 < FS || CP != CS || matriz[FS, CS] != 0 || ((FP + 1 == FS && CP - 1 == CS || FP + 1 == FS && CP + 1 == CS) && matriz[FS, CS] == 0) || (FP + 2 == FS && CP == CS && PN1U != 1) || (FP + 2 == FS && CP == CS && PN1U == 1 && matriz[FS-1,CS] != 0))//movimineto invalido
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        break;
                    }
                     if (FP + 2 == FS && CP == CS && PN1U == 1)//Primer movimiento de 2
                    {
                        PN1U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP + 1 == FS && CP == CS)//movimiento de 1
                    {
                        PN1U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    break;
                case 12: //Peon negro numero 2
                    if ((FP + 1 == FS && CP - 1 == CS || FP + 1 == FS && CP + 1 == CS) && matriz[FS, CS] != 0)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                    {
                        PN2U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP + 2 < FS || CP != CS || matriz[FS, CS] != 0 || ((FP + 1 == FS && CP - 1 == CS || FP + 1 == FS && CP + 1 == CS) && matriz[FS, CS] == 0) || (FP + 2 == FS && CP == CS && PN2U != 1) || (FP + 2 == FS && CP == CS && PN2U == 1 && matriz[FS-1,CS] != 0))//movimineto invalido
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        break;
                    }
                    if (FP + 2 == FS && CP == CS && PN2U == 1)//Primer movimiento de 2
                    {
                        PN2U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP + 1 == FS && CP == CS)//movimiento de 1
                    {
                        PN2U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    break;
                case 13: //Peon negro numero 3
                    if ((FP + 1 == FS && CP - 1 == CS || FP + 1 == FS && CP + 1 == CS) && matriz[FS, CS] != 0)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                    {
                        PN3U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP + 2 < FS || CP != CS || matriz[FS, CS] != 0 || ((FP + 1 == FS && CP - 1 == CS || FP + 1 == FS && CP + 1 == CS) && matriz[FS, CS] == 0) || (FP + 2 == FS && CP == CS && PN3U != 1) || (FP + 2 == FS && CP == CS && PN3U == 1 && matriz[FS-1,CS] != 0))//movimineto invalido
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        break;
                    }
                    if (FP + 2 == FS && CP == CS && PN3U == 1)//Primer movimiento de 2
                    {
                        PN3U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP + 1 == FS && CP == CS)//movimiento de 1
                    {
                        PN3U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    break;
                case 14: //Peon negro numero 4
                    if ((FP + 1 == FS && CP - 1 == CS || FP + 1 == FS && CP + 1 == CS) && matriz[FS, CS] != 0)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                    {
                        PN4U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP + 2 < FS || CP != CS || matriz[FS, CS] != 0 || ((FP + 1 == FS && CP - 1 == CS || FP + 1 == FS && CP + 1 == CS) && matriz[FS, CS] == 0) || (FP + 2 == FS && CP == CS && PN4U != 1) || (FP + 2 == FS && CP == CS && PN4U == 1 && matriz[FS-1,CS] != 0))//movimineto invalido
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        break;
                    }
                    if (FP + 2 == FS && CP == CS && PN4U == 1)//Primer movimiento de 2
                    {
                        PN4U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP + 1 == FS && CP == CS)//movimiento de 1
                    {
                        PN4U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    break;
                case 15://Peon negro numero 5
                    if ((FP + 1 == FS && CP - 1 == CS || FP + 1 == FS && CP + 1 == CS) && matriz[FS, CS] != 0)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                    {
                        PN5U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP + 2 < FS || CP != CS || matriz[FS, CS] != 0 || ((FP + 1 == FS && CP - 1 == CS || FP + 1 == FS && CP + 1 == CS) && matriz[FS, CS] == 0) || (FP + 2 == FS && CP == CS && PN5U != 1) || (FP + 2 == FS && CP == CS && PN5U == 1 && matriz[FS-1,CS] != 0))//movimineto invalido
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        break;
                    }
                    if (FP + 2 == FS && CP == CS && PN5U == 1)//Primer movimiento de 2
                    {
                        PN5U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP + 1 == FS && CP == CS)//movimiento de 1
                    {
                        PN5U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    break;
                case 16: //Peon negro numero 6 
                    if ((FP + 1 == FS && CP - 1 == CS || FP + 1 == FS && CP + 1 == CS) && matriz[FS, CS] != 0)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                    {
                        PN6U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP + 2 < FS || CP != CS || matriz[FS, CS] != 0 || ((FP + 1 == FS && CP - 1 == CS || FP + 1 == FS && CP + 1 == CS) && matriz[FS, CS] == 0) || (FP + 2 == FS && CP == CS && PN6U != 1) || (FP + 2 == FS && CP == CS && PN6U == 1 && matriz[FS-1,CS] != 0))//movimineto invalido
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        break;
                    }
                    if (FP + 2 == FS && CP == CS && PN6U == 1)//Primer movimiento de 2
                    {
                        PN6U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP + 1 == FS && CP == CS)//movimiento de 1
                    {
                        PN6U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    break;
                case 17://Peon negro numero 7
                    if ((FP + 1 == FS && CP - 1 == CS || FP + 1 == FS && CP + 1 == CS) && matriz[FS, CS] != 0)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                    {
                        PN7U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP + 2 < FS || CP != CS || matriz[FS, CS] != 0 || ((FP + 1 == FS && CP - 1 == CS || FP + 1 == FS && CP + 1 == CS) && matriz[FS, CS] == 0) || (FP + 2 == FS && CP == CS && PN7U != 1) || (FP + 2 == FS && CP == CS && PN7U == 1 && matriz[FS-1,CS] != 0))//movimineto invalido
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        break;
                    }
                    if (FP + 2 == FS && CP == CS && PN7U == 1)//Primer movimiento de 2
                    {
                        PN7U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP + 1 == FS && CP == CS)//movimiento de 1
                    {
                        PN7U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    break;
                case 18://peon negro numero 18
                    if ((FP + 1 == FS && CP - 1 == CS || FP + 1 == FS && CP + 1 == CS) && matriz[FS, CS] != 0)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                    {
                        PN8U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP + 2 < FS || CP != CS || matriz[FS, CS] != 0 || ((FP + 1 == FS && CP - 1 == CS || FP + 1 == FS && CP + 1 == CS) && matriz[FS, CS] == 0) || (FP + 2 == FS && CP == CS && PN8U != 1) || (FP + 2 == FS && CP == CS && PN8U == 1 && matriz[FS-1,CS] != 0))//movimineto invalido
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        break;
                    }
                    if (FP + 2 == FS && CP == CS && PN8U == 1)//Primer movimiento de 2
                    {
                        PN8U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP + 1 == FS && CP == CS)//movimiento de 1
                    {
                        PN8U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    break;





                case 21://Torre blanca 1



                    int TMV3 = 1; //Variable usada para calcular si es posible el movimiento de la torre en vertical
                    int TMH3 = 1; //Variable usada para calcular si es posible el movimiento de la torre en horizontal


                    if (CS == CP) //Analiza la posibilidad de haber realizado un movimiento en vertical
                    {
                        if (FP < FS) // analiza si el movimiente es hacia adelante
                        {
                            for (int PV = FP; PV < FS; PV++) // analiza los espacios con cero que hay hacia adelante de la torre
                            {
                                if (matriz[PV, CP] != 0 && matriz[PV, CP] != 21) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                                {
                                    TMV3 = 0;//se asigna cero de manera que no es posible un movimiento
                                }
                            }
                            if (TMV3 == 1)// si es 1 se puede lograr un movimiento
                            {
                                TB1U = 0;
                                MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                                MR2 = matriz2[FP, CP];//igual con la matriz 2
                                matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                                matriz2[FP, CP] = 0;//igual con la matriz 2
                                matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                                matriz2[FS, CS] = MR2;//igual con la matriz 2
                                Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                                imagenes();
                                break;
                            }
                            if (TMV3 == 0)//como es 0 es imposible lograr un movimiento
                            {
                                Limpiar();
                                MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                                break;

                            }
                        }
                        if (FP > FS)
                        {

                            for (int PV = FP; PV > FS; PV--) // analiza los espacios con cero que hay hacia adelante de la torre
                            {
                                if (matriz[PV, CP] != 0 && matriz[PV, CP] != 21) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                                {
                                    TMV3 = 0;//se asigna cero de manera que no es posible un movimiento
                                }
                            }
                            if (TMV3 == 1)// si es 1 se puede lograr un movimiento
                            {
                                TB1U = 0;
                                MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                                MR2 = matriz2[FP, CP];//igual con la matriz 2
                                matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                                matriz2[FP, CP] = 0;//igual con la matriz 2
                                matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                                matriz2[FS, CS] = MR2;//igual con la matriz 2
                                Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                                imagenes();
                                break;
                            }
                            if (TMV3 == 0)//como es 0 es imposible lograr un movimiento
                            {
                                Limpiar();
                                MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                                break;

                            }
                        }
                    }



                    if (FS == FP)
                    {
                        if (CP < CS) // analiza si el movimiente es hacia la derecha
                        {
                            for (int PH = CP; PH < CS; PH++) // analiza los espacios con cero que hay hacia adelante de la torre
                            {
                                if (matriz[FP, PH] != 0 && matriz[FP, PH] != 21) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                                {
                                    TMH3 = 0;//se asigna cero de manera que no es posible un movimiento
                                }
                            }
                            if (TMH3 == 1)// si es 1 se puede lograr un movimiento
                            {
                                TB1U = 0;
                                MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                                MR2 = matriz2[FP, CP];//igual con la matriz 2
                                matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                                matriz2[FP, CP] = 0;//igual con la matriz 2
                                matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                                matriz2[FS, CS] = MR2;//igual con la matriz 2
                                Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                                imagenes();
                                break;
                            }
                            if (TMH3 == 0)//como es 0 es imposible lograr un movimiento
                            {
                                Limpiar();
                                MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                                break;

                            }
                        }
                        if (CP > CS)// analiza si el movimiente es hacia la izquierda
                        {
                            for (int PH = CP; PH > CS; PH--) // analiza los espacios con cero que hay hacia adelante de la torre
                            {
                                if (matriz[FP, PH] != 0 && matriz[FP, PH] != 21) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                                {
                                    TMH3 = 0;//se asigna cero de manera que no es posible un movimiento
                                }
                            }
                            if (TMH3 == 1)// si es 1 se puede lograr un movimiento
                            {
                                TB1U = 0;
                                MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                                MR2 = matriz2[FP, CP];//igual con la matriz 2
                                matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                                matriz2[FP, CP] = 0;//igual con la matriz 2
                                matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                                matriz2[FS, CS] = MR2;//igual con la matriz 2
                                Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                                imagenes();
                                break;
                            }
                            if (TMH3 == 0)//como es 0 es imposible lograr un movimiento
                            {
                                Limpiar();
                                MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                                break;

                            }
                        }
                    }
                    if (CS != CP && FS != FP)
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        break;

                    }

                    break;




                case 22://caballo blanco
                    if (((FP - 2 == FS && CP - 1 == CS) || (FP - 2 == FS && CP + 1 == CS) || (CP - 2 == CS && FP - 1 == FS) || (CP - 2 == CS && FP + 1 == FS) || (FP + 2 == FS && CP - 1 == CS) || (FP + 2 == FS && CP + 1 == CS) || (CP + 2 == CS && FP - 1 == FS) || (CP + 2 == CS && FP + 1 == FS)))//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                    { //Comer de abajo para arriba y de izquierda a derecha                  //Comer de derecha a izquierda y de abajo para arriba               //Comer de arriba para abajo y de derecha para izquierda            //Comer de izquierda a derecha y de arriba para abajo
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    else
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        break;
                    }
                case 23://arfil Blanco
                    int A1D3 = 1; //Variable usada para calcular si es posible el movimiento de la torre en vertical

                    if (FP < FS && CP < CS) // analiza si el movimiente es hacia adelante
                    {
                        for (int CD1 = CP, FD1 = FP; CD1 <= CS && FD1 <= FS; CD1++, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                            {
                                A1D3 = 1;//se asigna 1 ya que seria posible el movimiento
                            }
                            else
                            {
                                A1D3 = 0;//si la diagonal es diferente se coloca 0
                            }

                        }
                        for (int CD1 = CP , FD1 = FP; CD1 < CS && FD1 < FS; CD1++, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (matriz[FD1, CD1] != 0 && matriz[FD1, CD1] != 23) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                A1D3 = 0;//se asigna cero de manera que no es posible un movimiento
                            }

                        }
                        if (A1D3 == 1)// si es 1 se puede lograr un movimiento
                        {
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            imagenes();
                            break;
                        }
                        if (A1D3 == 0)//como es 0 es imposible lograr un movimiento
                        {
                            Limpiar();
                            MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;

                        }
                    }
                    if (FP > FS && CP > CS) // analiza si el movimiente es hacia adelante
                    {

                        for (int CD1 = CP, FD1 = FP; CD1 >= CS && FD1 >= FS; CD1--, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                            {
                                A1D3 = 1;//se asigna 1 ya que seria posible el movimiento
                            }
                            else
                            {
                                A1D3 = 0;//si la diagonal es diferente se coloca 0
                            }

                        }
                        for (int CD1 = CP, FD1 = FP; CD1 > CS && FD1 > FS; CD1--, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[FD1, CD1] != 0 && matriz[FD1, CD1] != 23) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                A1D3 = 0;//se asigna cero de manera que no es posible un movimiento
                            }

                        }
                        if (A1D3 == 1)// si es 1 se puede lograr un movimiento
                        {
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            imagenes();
                            break;
                        }
                        if (A1D3 == 0)//como es 0 es imposible lograr un movimiento
                        {
                            Limpiar();
                            MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;

                        }
                    }
                    if (FP < FS && CP > CS) // analiza si el movimiente es hacia adelante
                    {
                        for (int CD1 = CP, FD1 = FP; CD1 >= CS && FD1 <= FS; CD1--, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                            {
                                A1D3 = 1;//se asigna 1 ya que seria posible el movimiento
                            }
                            else
                            {
                                A1D3 = 0;//si la diagonal es diferente se coloca 0
                            }

                        }
                        for (int CD1 = CP, FD1 = FP; CD1 > CS && FD1 < FS; CD1--, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[FD1, CD1] != 0 && matriz[FD1, CD1] != 23) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                A1D3 = 0;//se asigna cero de manera que no es posible un movimiento
                            }

                        }
                        if (A1D3 == 1)// si es 1 se puede lograr un movimiento
                        {
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            imagenes();
                            break;
                        }
                        if (A1D3 == 0)//como es 0 es imposible lograr un movimiento
                        {
                            Limpiar();
                            MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;

                        }
                    }
                    if (FP > FS && CP < CS) // analiza si el movimiente es hacia adelante
                    {
                        for (int CD1 = CP, FD1 = FP; CD1 <= CS && FD1 >= FS; CD1++, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                            {
                                A1D3 = 1;//se asigna 1 ya que seria posible el movimiento
                            }
                            else
                            {
                                A1D3 = 0;//si la diagonal es diferente se coloca 0
                            }

                        }
                        for (int CD1 = CP, FD1 = FP; CD1 < CS && FD1 > FS; CD1++, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[FD1, CD1] != 0 && matriz[FD1, CD1] != 23) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                A1D3 = 0;//se asigna cero de manera que no es posible un movimiento
                            }

                        }
                        if (A1D3 == 1)// si es 1 se puede lograr un movimiento
                        {
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            imagenes();
                            break;
                        }
                        if (A1D3 == 0)//como es 0 es imposible lograr un movimiento
                        {
                            Limpiar();
                            MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;

                        }
                    }
                    break;
                case 24:// reina
                    //Funciones para realizar movimientos en diagonal en la Reina
                    int RM2 = 1; //Variable usada para calcular si es posible el movimiento En diagonal 

                    if (FP < FS && CP < CS) // analiza si el movimiente es hacia adelante
                    {
                        for (int CD1 = CP, FD1 = FP; CD1 <= CS && FD1 <= FS; CD1++, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                            {
                                RM2 = 1;//se asigna 1 ya que seria posible el movimiento
                            }
                            else
                            {
                                RM2 = 0;//si la diagonal es diferente se coloca 0
                            }

                        }
                        for (int CD1 = CP, FD1 = FP; CD1 < CS && FD1 < FS; CD1++, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (matriz[FD1, CD1] != 0 && matriz[FD1, CD1] != 24) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                RM2 = 0;//se asigna cero de manera que no es posible un movimiento
                            }

                        }
                        if (RM2 == 1)// si es 1 se puede lograr un movimiento
                        {
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            imagenes();
                            break;
                        }
                        if (RM2 == 0)//como es 0 es imposible lograr un movimiento
                        {
                            Limpiar();
                            MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;

                        }
                    }
                    if (FP > FS && CP > CS) // analiza si el movimiente es hacia adelante
                    {

                        for (int CD1 = CP, FD1 = FP; CD1 >= CS && FD1 >= FS; CD1--, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                            {
                                RM2 = 1;//se asigna 1 ya que seria posible el movimiento
                            }
                            else
                            {
                                RM2 = 0;//si la diagonal es diferente se coloca 0
                            }

                        }
                        for (int CD1 = CP, FD1 = FP; CD1 > CS && FD1 > FS; CD1--, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[FD1, CD1] != 0 && matriz[FD1, CD1] != 24) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                RM2 = 0;//se asigna cero de manera que no es posible un movimiento
                            }

                        }
                        if (RM2 == 1)// si es 1 se puede lograr un movimiento
                        {
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            imagenes();
                            break;
                        }
                        if (RM2 == 0)//como es 0 es imposible lograr un movimiento
                        {
                            Limpiar();
                            MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;

                        }
                    }
                    if (FP < FS && CP > CS) // analiza si el movimiente es hacia adelante
                    {
                        for (int CD1 = CP, FD1 = FP; CD1 >= CS && FD1 <= FS; CD1--, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                            {
                                RM2 = 1;//se asigna 1 ya que seria posible el movimiento
                            }
                            else
                            {
                                RM2 = 0;//si la diagonal es diferente se coloca 0
                            }

                        }
                        for (int CD1 = CP, FD1 = FP; CD1 > CS && FD1 < FS; CD1--, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[FD1, CD1] != 0 && matriz[FD1, CD1] != 24) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                RM2 = 0;//se asigna cero de manera que no es posible un movimiento
                            }

                        }
                        if (RM2 == 1)// si es 1 se puede lograr un movimiento
                        {
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            imagenes();
                            break;
                        }
                        if (RM2 == 0)//como es 0 es imposible lograr un movimiento
                        {
                            Limpiar();
                            MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;

                        }
                    }
                    if (FP > FS && CP < CS) // analiza si el movimiente es hacia adelante
                    {
                        for (int CD1 = CP, FD1 = FP; CD1 <= CS && FD1 >= FS; CD1++, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                            {
                                RM2 = 1;//se asigna 1 ya que seria posible el movimiento
                            }
                            else
                            {
                                RM2 = 0;//si la diagonal es diferente se coloca 0
                            }

                        }
                        for (int CD1 = CP, FD1 = FP; CD1 < CS && FD1 > FS; CD1++, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[FD1, CD1] != 0 && matriz[FD1, CD1] != 24) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                RM2 = 0;//se asigna cero de manera que no es posible un movimiento
                            }

                        }
                        if (RM2 == 1)// si es 1 se puede lograr un movimiento
                        {
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            imagenes();
                            break;
                        }
                        if (RM2 == 0)//como es 0 es imposible lograr un movimiento
                        {
                            Limpiar();
                            MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;

                        }
                    }
                    //Funciones para hacer movimientos en Horizontal con la reina
                    int RMV2 = 1; //Variable usada para calcular si es posible el movimiento de la torre en vertical
                    int RMH2 = 1; //Variable usada para calcular si es posible el movimiento de la torre en horizontal


                    if (CS == CP) //Analiza la posibilidad de haber realizado un movimiento en vertical
                    {
                        if (FP < FS) // analiza si el movimiente es hacia adelante
                        {
                            for (int PV = FP; PV < FS; PV++) // analiza los espacios con cero que hay hacia adelante de la torre
                            {
                                if (matriz[PV, CP] != 0 && matriz[PV, CP] != 24) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                                {
                                    RMV2 = 0;//se asigna cero de manera que no es posible un movimiento
                                }
                            }
                            if (RMV2 == 1)// si es 1 se puede lograr un movimiento
                            {
                                MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                                MR2 = matriz2[FP, CP];//igual con la matriz 2
                                matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                                matriz2[FP, CP] = 0;//igual con la matriz 2
                                matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                                matriz2[FS, CS] = MR2;//igual con la matriz 2
                                Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                                imagenes();
                                break;
                            }
                            if (RMV2 == 0)//como es 0 es imposible lograr un movimiento
                            {
                                Limpiar();
                                MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                                break;

                            }
                        }
                        if (FP > FS)
                        {
                            for (int PV = FP; PV > FS; PV--) // analiza los espacios con cero que hay hacia adelante de la torre
                            {
                                if (matriz[PV, CP] != 0 && matriz[PV, CP] != 24) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                                {
                                    RMV2 = 0;//se asigna cero de manera que no es posible un movimiento
                                }
                            }
                            if (RMV2 == 1)// si es 1 se puede lograr un movimiento
                            {
                                MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                                MR2 = matriz2[FP, CP];//igual con la matriz 2
                                matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                                matriz2[FP, CP] = 0;//igual con la matriz 2
                                matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                                matriz2[FS, CS] = MR2;//igual con la matriz 2
                                Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                                imagenes();
                                break;
                            }
                            if (RMV2 == 0)//como es 0 es imposible lograr un movimiento
                            {
                                Limpiar();
                                MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                                break;

                            }
                        }
                    }



                    if (FS == FP)
                    {
                        if (CP < CS) // analiza si el movimiente es hacia la derecha
                        {
                            for (int PH = CP; PH < CS; PH++) // analiza los espacios con cero que hay hacia adelante de la torre
                            {
                                if (matriz[FP, PH] != 0 && matriz[FP, PH] != 24) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                                {
                                    RMH2 = 0;//se asigna cero de manera que no es posible un movimiento
                                }
                            }
                            if (RMH2 == 1)// si es 1 se puede lograr un movimiento
                            {
                                MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                                MR2 = matriz2[FP, CP];//igual con la matriz 2
                                matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                                matriz2[FP, CP] = 0;//igual con la matriz 2
                                matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                                matriz2[FS, CS] = MR2;//igual con la matriz 2
                                Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                                imagenes();
                                break;
                            }
                            if (RMH2 == 0)//como es 0 es imposible lograr un movimiento
                            {
                                Limpiar();
                                MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                                break;

                            }
                        }
                        if (CP > CS)// analiza si el movimiente es hacia la izquierda
                        {
                            for (int PH = CP; PH > CS; PH--) // analiza los espacios con cero que hay hacia adelante de la torre
                            {
                                if (matriz[FP, PH] != 0 && matriz[FP, PH] != 24) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                                {
                                    RMH2 = 0;//se asigna cero de manera que no es posible un movimiento
                                }
                            }
                            if (RMH2 == 1)// si es 1 se puede lograr un movimiento
                            {
                                MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                                MR2 = matriz2[FP, CP];//igual con la matriz 2
                                matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                                matriz2[FP, CP] = 0;//igual con la matriz 2
                                matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                                matriz2[FS, CS] = MR2;//igual con la matriz 2
                                Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                                imagenes();
                                break;
                            }
                            if (RMH2 == 0)//como es 0 es imposible lograr un movimiento
                            {
                                Limpiar();
                                MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                                break;

                            }
                        }
                    }
                    if (CS != CP && FS != FP)
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        break;

                    }

                    break;
                case 25:// rey Blanco
                    if (((CP + 1 == CS && FP == FS) || (CP - 1 == CS && FP == FS) || (FP + 1 == FS && CP == CS) || (FP - 1 == FS && CP == CS))) //funcion usada para mover el rey en movimientos de 1
                    {
                        RBU = 0;
                        CBREY = CS;
                        FBREY = FS;
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (((CP + 1 == CS) && (FP + 1 == FS || FP - 1 == FS)) || ((CP - 1 == CS) && (FP + 1 == FS || FP - 1 == FS)))
                    {
                        RBU = 0;
                        CBREY = CS;
                        FBREY = FS;
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (CS == 2 && FP == FS && TB1U == 1 && RBU == 1)//enrroque largo
                    {
                        for (int C = 3; C > 0; C--)//se calcula si no hay piezas entre la torre y el rey
                        {
                            if (matriz[7, C] != 0)//si hay alguna pieza se impide el enrroque
                            {
                                ERQ = 0;//se cambia el valor de ERQ de manera que se cancela el enrroque
                            }
                        }
                        if (ERQ == 1)//si no hay piezas entre la torre y el rey el enrroque se realiza
                        {
                            //se cambia el la posicion del rey
                            RBU = 0;
                            TB1U = 0;
                            CBREY = CS;
                            FBREY = FS;
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            //se cambia la posicion de la torre
                            MR = matriz[7, 0];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[7, 0];//igual con la matriz 2
                            matriz[7, 0] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[7, 0] = 0;//igual con la matriz 2
                            matriz[7, 3] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[7, 3] = MR2;//igual con la matriz 2

                            imagenes();
                            break;
                        }
                        else//si hay piezas entre el rey y la torre se impide el enrroque
                        {
                            Limpiar();
                            MessageBox.Show("No es posible realizar el enrroque");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;
                        }
                    }
                    if (CS == 6 && FP == FS && TB2U == 1 && RBU == 1)
                    {
                        for (int C = 5; C < 7; C++)
                        {
                            if (matriz[7, C] != 0)
                            {
                                ERQ = 0;
                            }
                        }
                        if (ERQ == 1)
                        {
                            TB2U = 0;
                            RBU = 0;
                            CBREY = CS;
                            FBREY = FS;
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza

                            MR = matriz[7, 0];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[7, 0];//igual con la matriz 2
                            matriz[7, 7] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[7, 7] = 0;//igual con la matriz 2
                            matriz[7, 5] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[7, 5] = MR2;//igual con la matriz 2

                            imagenes();
                            break;
                        }
                        else
                        {
                            Limpiar();
                            MessageBox.Show("No es posible realizar el enrroque");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;
                        }
                    }
                    else// si no se cumplen las condiciones el movimiento no es permitido
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        break;
                    }
                case 26://arfil Blanco
                    int A1D4 = 1; //Variable usada para calcular si es posible el movimiento de la torre en vertical

                    if (FP < FS && CP < CS) // analiza si el movimiente es hacia adelante
                    {
                        for (int CD1 = CP, FD1 = FP; CD1 <= CS && FD1 <= FS; CD1++, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                            {
                                A1D4 = 1;//se asigna 1 ya que seria posible el movimiento
                            }
                            else
                            {
                                A1D4 = 0;//si la diagonal es diferente se coloca 0
                            }

                        }
                        for (int CD1 = CP, FD1 = FP; CD1 < CS && FD1 < FS; CD1++, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (matriz[FD1, CD1] != 0 && matriz[FD1, CD1] != 26) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                A1D4 = 0;//se asigna cero de manera que no es posible un movimiento
                            }

                        }
                        if (A1D4 == 1)// si es 1 se puede lograr un movimiento
                        {
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            imagenes();
                            break;
                        }
                        if (A1D4 == 0)//como es 0 es imposible lograr un movimiento
                        {
                            Limpiar();
                            MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;

                        }
                    }
                    if (FP > FS && CP > CS) // analiza si el movimiente es hacia adelante
                    {

                        for (int CD1 = CP, FD1 = FP; CD1 >= CS && FD1 >= FS; CD1--, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                            {
                                A1D4 = 1;//se asigna 1 ya que seria posible el movimiento
                            }
                            else
                            {
                                A1D4 = 0;//si la diagonal es diferente se coloca 0
                            }

                        }
                        for (int CD1 = CP, FD1 = FP; CD1 > CS && FD1 > FS; CD1--, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[FD1, CD1] != 0 && matriz[FD1, CD1] != 26) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                A1D4 = 0;//se asigna cero de manera que no es posible un movimiento
                            }

                        }
                        if (A1D4 == 1)// si es 1 se puede lograr un movimiento
                        {
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            imagenes();
                            break;
                        }
                        if (A1D4 == 0)//como es 0 es imposible lograr un movimiento
                        {
                            Limpiar();
                            MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;

                        }
                    }
                    if (FP < FS && CP > CS) // analiza si el movimiente es hacia adelante
                    {
                        for (int CD1 = CP, FD1 = FP; CD1 >= CS && FD1 <= FS; CD1--, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                            {
                                A1D4 = 1;//se asigna 1 ya que seria posible el movimiento
                            }
                            else
                            {
                                A1D4 = 0;//si la diagonal es diferente se coloca 0
                            }

                        }
                        for (int CD1 = CP, FD1 = FP; CD1 > CS && FD1 < FS; CD1--, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[FD1, CD1] != 0 && matriz[FD1, CD1] != 26) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                A1D4 = 0;//se asigna cero de manera que no es posible un movimiento
                            }

                        }
                        if (A1D4 == 1)// si es 1 se puede lograr un movimiento
                        {
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            imagenes();
                            break;
                        }
                        if (A1D4 == 0)//como es 0 es imposible lograr un movimiento
                        {
                            Limpiar();
                            MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;

                        }
                    }
                    if (FP > FS && CP < CS) // analiza si el movimiente es hacia adelante
                    {
                        for (int CD1 = CP, FD1 = FP; CD1 <= CS && FD1 >= FS; CD1++, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {

                            if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                            {
                                A1D4 = 1;//se asigna 1 ya que seria posible el movimiento
                            }
                            else
                            {
                                A1D4 = 0;//si la diagonal es diferente se coloca 0
                            }

                        }
                        for (int CD1 = CP, FD1 = FP; CD1 < CS && FD1 > FS; CD1++, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[FD1, CD1] != 0 && matriz[FD1, CD1] != 26) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                A1D4 = 0;//se asigna cero de manera que no es posible un movimiento
                            }

                        }
                        if (A1D4 == 1)// si es 1 se puede lograr un movimiento
                        {
                            MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                            MR2 = matriz2[FP, CP];//igual con la matriz 2
                            matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                            matriz2[FP, CP] = 0;//igual con la matriz 2
                            matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                            matriz2[FS, CS] = MR2;//igual con la matriz 2
                            Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                            imagenes();
                            break;
                        }
                        if (A1D4 == 0)//como es 0 es imposible lograr un movimiento
                        {
                            Limpiar();
                            MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                            break;

                        }
                    }
                    break;
                    

                case 27://caballo blanco 2
                    if (((FP - 2 == FS && CP - 1 == CS) || (FP - 2 == FS && CP + 1 == CS) || (CP - 2 == CS && FP - 1 == FS) || (CP - 2 == CS && FP + 1 == FS) || (FP + 2 == FS && CP - 1 == CS) || (FP + 2 == FS && CP + 1 == CS) || (CP + 2 == CS && FP - 1 == FS) || (CP + 2 == CS && FP + 1 == FS)))//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                    { //Comer de abajo para arriba y de izquierda a derecha                  //Comer de derecha a izquierda y de abajo para arriba               //Comer de arriba para abajo y de derecha para izquierda            //Comer de izquierda a derecha y de arriba para abajo
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    else
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        break;
                    }
                case 28:

                    int TMV4 = 1; //Variable usada para calcular si es posible el movimiento de la torre en vertical
                    int TMH4 = 1; //Variable usada para calcular si es posible el movimiento de la torre en horizontal


                    if (CS == CP) //Analiza la posibilidad de haber realizado un movimiento en vertical
                    {
                        if (FP < FS) // analiza si el movimiente es hacia adelante
                        {
                            for (int PV = FP; PV < FS; PV++) // analiza los espacios con cero que hay hacia adelante de la torre
                            {
                                if (matriz[PV, CP] != 0 && matriz[PV, CP] != 28) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                                {
                                    TMV4 = 0;//se asigna cero de manera que no es posible un movimiento
                                }
                            }
                            if (TMV4 == 1)// si es 1 se puede lograr un movimiento
                            {
                                TB2U = 0;
                                MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                                MR2 = matriz2[FP, CP];//igual con la matriz 2
                                matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                                matriz2[FP, CP] = 0;//igual con la matriz 2
                                matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                                matriz2[FS, CS] = MR2;//igual con la matriz 2
                                Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                                imagenes();
                                break;
                            }
                            if (TMV4 == 0)//como es 0 es imposible lograr un movimiento
                            {
                                Limpiar();
                                MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                                break;

                            }
                        }
                        if (FP > FS)
                        {
                            for (int PV = FP; PV > FS; PV--) // analiza los espacios con cero que hay hacia adelante de la torre
                            {
                                if (matriz[PV, CP] != 0 && matriz[PV, CP] != 28) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                                {
                                    TMV4 = 0;//se asigna cero de manera que no es posible un movimiento
                                }
                            }
                            if (TMV4 == 1)// si es 1 se puede lograr un movimiento
                            {
                                TB2U = 0;
                                MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                                MR2 = matriz2[FP, CP];//igual con la matriz 2
                                matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                                matriz2[FP, CP] = 0;//igual con la matriz 2
                                matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                                matriz2[FS, CS] = MR2;//igual con la matriz 2
                                Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                                imagenes();
                                break;
                            }
                            if (TMV4 == 0)//como es 0 es imposible lograr un movimiento
                            {
                                Limpiar();
                                MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                                break;

                            }
                        }
                    }



                    if (FS == FP)
                    {
                        if (CP < CS) // analiza si el movimiente es hacia la derecha
                        {
                            for (int PH = CP; PH < CS; PH++) // analiza los espacios con cero que hay hacia adelante de la torre
                            {
                                if (matriz[FP, PH] != 0 && matriz[FP, PH] != 28) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                                {
                                    TMH4 = 0;//se asigna cero de manera que no es posible un movimiento
                                }
                            }
                            if (TMH4 == 1)// si es 1 se puede lograr un movimiento
                            {
                                TB2U = 0;
                                MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                                MR2 = matriz2[FP, CP];//igual con la matriz 2
                                matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                                matriz2[FP, CP] = 0;//igual con la matriz 2
                                matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                                matriz2[FS, CS] = MR2;//igual con la matriz 2
                                Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                                imagenes();
                                break;
                            }
                            if (TMH4 == 0)//como es 0 es imposible lograr un movimiento
                            {
                                Limpiar();
                                MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                                break;

                            }
                        }
                        if (CP > CS)// analiza si el movimiente es hacia la izquierda
                        {
                            for (int PH = CP; PH > CS; PH--) // analiza los espacios con cero que hay hacia adelante de la torre
                            {
                                if (matriz[FP, PH] != 0 && matriz[FP, PH] != 28) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                                {
                                    TMH4 = 0;//se asigna cero de manera que no es posible un movimiento
                                }
                            }
                            if (TMH4 == 1)// si es 1 se puede lograr un movimiento
                            {
                                TB2U = 0;
                                MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                                MR2 = matriz2[FP, CP];//igual con la matriz 2
                                matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                                matriz2[FP, CP] = 0;//igual con la matriz 2
                                matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                                matriz2[FS, CS] = MR2;//igual con la matriz 2
                                Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                                imagenes();
                                break;
                            }
                            if (TMH4 == 0)//como es 0 es imposible lograr un movimiento
                            {
                                Limpiar();
                                MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                                break;

                            }
                        }
                    }
                    if (CS != CP && FS != FP)
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        break;

                    }

                    break;





                case 31://peon blanco numero 1
                    if ((FP - 1 == FS && CP + 1 == CS || FP - 1 == FS && CP - 1 == CS) && matriz[FS, CS] != 0)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                    {
                        PB1U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP - 2 > FS || CP != CS || matriz[FS, CS] != 0 || ((FP - 1 == FS && CP + 1 == CS || FP - 1 == FS && CP - 1 == CS) && matriz[FS, CS] == 0) || (FP - 2 == FS && CP == CS && PB1U != 1) || (FP - 2 == FS && CP == CS && PB1U == 1 && matriz[FS+1,CS] != 0))//movimineto invalido
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        break;
                    }
                    if (FP - 2 == FS && CP == CS && PB1U == 1)//Primer movimiento de 2
                    {
                        PB1U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP - 1 == FS && CP == CS)//movimiento de 1
                    {
                        PB1U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    break;
                case 32://peon blanco numero 2
                    if ((FP - 1 == FS && CP + 1 == CS || FP - 1 == FS && CP - 1 == CS) && matriz[FS, CS] != 0)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                    {
                        PB1U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }

                    if (FP - 2 > FS || CP != CS || matriz[FS, CS] != 0 || ((FP - 1 == FS && CP + 1 == CS || FP - 1 == FS && CP - 1 == CS) && matriz[FS, CS] == 0) || (FP - 2 == FS && CP == CS && PB2U != 1) || (FP - 2 == FS && CP == CS && PB2U == 1 && matriz[FS+1,CS] != 0))//movimineto invalido
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        
                        break;
                    }
                    if (FP - 2 == FS && CP == CS && PB2U == 1)//Primer movimiento de 2
                    {
                        PB2U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP - 1 == FS && CP == CS)//movimiento de 1
                    {
                        PB2U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    break;
                case 33://peon blanco numero 3
                    if ((FP - 1 == FS && CP + 1 == CS || FP - 1 == FS && CP - 1 == CS) && matriz[FS, CS] != 0)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                    {
                        PB1U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }

                    if (FP - 2 > FS || CP != CS || matriz[FS, CS] != 0 || ((FP - 1 == FS && CP + 1 == CS || FP - 1 == FS && CP - 1 == CS) && matriz[FS, CS] == 0) || (FP - 2 == FS && CP == CS && PB3U != 1) || (FP - 2 == FS && CP == CS && PB3U == 1 && matriz[FS+1,CS] != 0))//movimineto invalido
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        
                        break;
                    }
                    if (FP - 2 == FS && CP == CS && PB3U == 1)//Primer movimiento de 2
                    {
                        PB3U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP - 1 == FS && CP == CS)//movimiento de 1
                    {
                        PB3U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    break;
                case 34://peon blanco numero 4
                    if ((FP - 1 == FS && CP + 1 == CS || FP - 1 == FS && CP - 1 == CS) && matriz[FS, CS] != 0)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                    {
                        PB1U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }

                    if (FP - 2 > FS || CP != CS || matriz[FS, CS] != 0 || ((FP - 1 == FS && CP + 1 == CS || FP - 1 == FS && CP - 1 == CS) && matriz[FS, CS] == 0) || (FP - 2 == FS && CP == CS && PB4U != 1) || (FP - 2 == FS && CP == CS && PB4U == 1 && matriz[FS+1,CS] != 0))//movimineto invalido
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        
                        break;
                    }
                    if (FP - 2 == FS && CP == CS && PB4U == 1)//Primer movimiento de 2
                    {
                        PB4U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP - 1 == FS && CP == CS)//movimiento de 1
                    {
                        PB4U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    break;
                case 35://peon blanco numero 5
                    if ((FP - 1 == FS && CP + 1 == CS || FP - 1 == FS && CP - 1 == CS) && matriz[FS, CS] != 0)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                    {
                        PB1U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }

                    if (FP - 2 > FS || CP != CS || matriz[FS, CS] != 0 || ((FP - 1 == FS && CP + 1 == CS || FP - 1 == FS && CP - 1 == CS) && matriz[FS, CS] == 0) || (FP - 2 == FS && CP == CS && PB5U != 1) || (FP - 2 == FS && CP == CS && PB5U == 1 && matriz[FS+1,CS] != 0))//movimineto invalido
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        
                        break;
                    }
                    if (FP - 2 == FS && CP == CS && PB5U == 1)//Primer movimiento de 2
                    {
                        PB5U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP - 1 == FS && CP == CS)//movimiento de 1
                    {
                        PB5U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    break;
                case 36://peon blanco numero 6
                    if ((FP - 1 == FS && CP + 1 == CS || FP - 1 == FS && CP - 1 == CS) && matriz[FS, CS] != 0)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                    {
                        PB1U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }

                    if (FP - 2 > FS || CP != CS || matriz[FS, CS] != 0 || ((FP - 1 == FS && CP + 1 == CS || FP - 1 == FS && CP - 1 == CS) && matriz[FS, CS] == 0) || (FP - 2 == FS && CP == CS && PB6U != 1) || (FP - 2 == FS && CP == CS && PB6U == 1 && matriz[FS+1,CS] != 0))//movimineto invalido
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        
                        break;
                    }
                    if (FP - 2 == FS && CP == CS && PB6U == 1)//Primer movimiento de 2
                    {
                        PB6U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP - 1 == FS && CP == CS)//movimiento de 1
                    {
                        PB6U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    break;
                case 37://peon blanco numero 7
                    if ((FP - 1 == FS && CP + 1 == CS || FP - 1 == FS && CP - 1 == CS) && matriz[FS, CS] != 0)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                    {
                        PB1U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }

                    if (FP - 2 > FS || CP != CS || matriz[FS, CS] != 0 || ((FP - 1 == FS && CP + 1 == CS || FP - 1 == FS && CP - 1 == CS) && matriz[FS, CS] == 0) || (FP - 2 == FS && CP == CS && PB7U != 1) || (FP - 2 == FS && CP == CS && PB7U == 1 && matriz[FS+1,CS] != 0))//movimineto invalido
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        
                        break;
                    }
                    if (FP - 2 == FS && CP == CS && PB7U == 1)//Primer movimiento de 2
                    {
                        PB7U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP - 1 == FS && CP == CS)//movimiento de 1
                    {
                        PB7U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    break;
                case 38://peon blanco numero 8
                    if ((FP - 1 == FS && CP + 1 == CS || FP - 1 == FS && CP - 1 == CS) && matriz[FS, CS] != 0)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                    {
                        PB1U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }

                    if (FP - 2 > FS || CP != CS || matriz[FS, CS] != 0 || ((FP - 1 == FS && CP + 1 == CS || FP - 1 == FS && CP - 1 == CS) && matriz[FS, CS] == 0) || (FP - 2 == FS && CP == CS && PB8U != 1) || (FP - 2 == FS && CP == CS && PB8U == 1 && matriz[FS+1,CS] != 0))//movimineto invalido
                    {
                        Limpiar();
                        MessageBox.Show("Movimineto Invalido");//Se muestra un mensaje de Alerta por movimiento invalido
                        
                        break;
                    }
                    if (FP - 2 == FS && CP == CS && PB8U == 1)//Primer movimiento de 2
                    {
                        PB8U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    if (FP - 1 == FS && CP == CS)//movimiento de 1
                    {
                        PB8U--;//Se resta a la variable PNU de manera que no se podra hace un movimiento de 2 espacios despues de esto
                        MR = matriz[FP, CP];//Se almacena el valor de la posion [FP,CP] obtenido de la posicion en que se cliqueo de para una posterior revaloracion
                        MR2 = matriz2[FP, CP];//igual con la matriz 2
                        matriz[FP, CP] = 0;//Se le asigna a la primera posicion el valor de 0 porque la pieza original fue comida y no hay cambio
                        matriz2[FP, CP] = 0;//igual con la matriz 2
                        matriz[FS, CS] = MR; //Se le asigna a la segunda posicion la posicion almacenada de la primera posicion
                        matriz2[FS, CS] = MR2;//igual con la matriz 2
                        Pieza = matriz[FS, CS];//se toma la variable pieza y se le asigna el valor para posteriormente intercambiar la imagen de la pieza
                        imagenes();
                        break;
                    }
                    break;
            }
        }
        public void imagenes()//Funcion para actualizar las imagenes luego de hacer un movimiento
        {
           

            for (int F = 0; F < 8; F++)//Se coloca un for para analizar fila por fila y columna por columna
            {
                for (int C = 0; C < 8; C++)//for de columna por columna
                {
                    switch(F)//en este switch se localizan los espacios en la fila
                    {
                        case 0:
                            switch (C)//en este switch se localizan los espacion en las columnas
                            {
                                case 0:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            A1.Image = null;
                                            break;
                                        case 1://Torre negra
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            A1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 1:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            B1.Image = null;
                                            break;
                                        case 1://Torre negra
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            B1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 2:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            C1.Image = null;
                                            break;
                                        case 1://Torre negra
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            C1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 3:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            D1.Image = null;
                                            break;
                                        case 1://Torre negra
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            D1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 4:
                                   switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                   {
                                       case 0:
                                           E1.Image = null;
                                           break;
                                        case 1://Torre negra
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            E1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 5:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            F1.Image = null;
                                            break;
                                        case 1://Torre negra
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            F1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 6:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            G1.Image = null;
                                            break;
                                        case 1://Torre negra
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            G1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 7:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            H1.Image = null;
                                            break;
                                        case 1://Torre negra
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            H1.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                            }
                            break;
                        case 1:
                            switch (C)//en este switch se localizan los espacion en las columnas
                            {
                                case 0:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            A2.Image = null;
                                            break;
                                        case 1://Torre negra
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            A2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 1:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            B2.Image = null;
                                            break;
                                        case 1://Torre negra
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            B2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 2:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            C2.Image = null;
                                            break;
                                        case 1://Torre negra
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            C2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 3:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            D2.Image = null;
                                            break;
                                        case 1://Torre negra
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            D2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 4:
                                   switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                   {
                                       case 0:
                                           E2.Image = null;
                                           break;
                                        case 1://Torre negra
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            E2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 5:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            F2.Image = null;
                                            break;
                                        case 1://Torre negra
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            F2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 6:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            G2.Image = null;
                                            break;
                                        case 1://Torre negra
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            G2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 7:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            H2.Image = null;
                                            break;
                                        case 1://Torre negra
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            H2.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                            }
                            break;
                        case 2:
                            switch (C)//en este switch se localizan los espacion en las columnas
                            {
                                case 0:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            A3.Image = null;
                                            break;
                                        case 1://Torre negra
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            A3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 1:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            B3.Image = null;
                                            break;
                                        case 1://Torre negra
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            B3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 2:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            C3.Image = null;
                                            break;
                                        case 1://Torre negra
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            C3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 3:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            D3.Image = null;
                                            break;
                                        case 1://Torre negra
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            D3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 4:
                                   switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                   {
                                       case 0:
                                           E3.Image = null;
                                           break;
                                        case 1://Torre negra
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            E3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 5:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            F3.Image = null;
                                            break;
                                        case 1://Torre negra
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            F3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 6:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            G3.Image = null;
                                            break;
                                        case 1://Torre negra
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            G3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 7:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            H3.Image = null;
                                            break;
                                        case 1://Torre negra
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            H3.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                            }
                            break;
                        case 3:
                            switch (C)//en este switch se localizan los espacion en las columnas
                            {
                                case 0:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            A4.Image = null;
                                            break;
                                        case 1://Torre negra
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            A4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 1:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            B4.Image = null;
                                            break;
                                        case 1://Torre negra
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            B4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 2:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            C4.Image = null;
                                            break;
                                        case 1://Torre negra
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            C4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 3:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            D4.Image = null;
                                            break;
                                        case 1://Torre negra
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            D4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 4:
                                   switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                   {
                                       case 0:
                                           E4.Image = null;
                                           break;
                                        case 1://Torre negra
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            E4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 5:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            F4.Image = null;
                                            break;
                                        case 1://Torre negra
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            F4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 6:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            G4.Image = null;
                                            break;
                                        case 1://Torre negra
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            G4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 7:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            H4.Image = null;
                                            break;
                                        case 1://Torre negra
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            H4.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                            }
                            break;
                        case 4:
                            switch (C)//en este switch se localizan los espacion en las columnas
                            {
                                case 0:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            A5.Image = null;
                                            break;
                                        case 1://Torre negra
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            A5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 1:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            B5.Image = null;
                                            break;
                                        case 1://Torre negra
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            B5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 2:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            C5.Image = null;
                                            break;
                                        case 1://Torre negra
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            C5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 3:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            D5.Image = null;
                                            break;
                                        case 1://Torre negra
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            D5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 4:
                                   switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                   {
                                       case 0:
                                           E5.Image = null;
                                           break;
                                        case 1://Torre negra
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            E5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 5:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            F5.Image = null;
                                            break;
                                        case 1://Torre negra
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            F5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 6:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            G5.Image = null;
                                            break;
                                        case 1://Torre negra
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            G5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 7:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            H5.Image = null;
                                            break;
                                        case 1://Torre negra
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            H5.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                            }
                            break;
                        case 5:
                            switch (C)//en este switch se localizan los espacion en las columnas
                            {
                                case 0:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            A6.Image = null;
                                            break;
                                        case 1://Torre negra
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            A6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 1:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            B6.Image = null;
                                            break;
                                        case 1://Torre negra
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            B6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 2:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            C6.Image = null;
                                            break;
                                        case 1://Torre negra
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            C6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 3:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            D6.Image = null;
                                            break;
                                        case 1://Torre negra
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            D6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 4:
                                   switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                   {
                                       case 0:
                                           E6.Image = null;
                                           break;
                                        case 1://Torre negra
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            E6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 5:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            F6.Image = null;
                                            break;
                                        case 1://Torre negra
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            F6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 6:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            G6.Image = null;
                                            break;
                                        case 1://Torre negra
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            G6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 7:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            H6.Image = null;
                                            break;
                                        case 1://Torre negra
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            H6.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                            }
                            break;
                        case 6:
                            switch (C)//en este switch se localizan los espacion en las columnas
                            {
                                case 0:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            A7.Image = null;
                                            break;
                                        case 1://Torre negra
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            A7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 1:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            B7.Image = null;
                                            break;
                                        case 1://Torre negra
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            B7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 2:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            C7.Image = null;
                                            break;
                                        case 1://Torre negra
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            C7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 3:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            D7.Image = null;
                                            break;
                                        case 1://Torre negra
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            D7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 4:
                                   switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                   {
                                       case 0:
                                           E7.Image = null;
                                           break;
                                        case 1://Torre negra
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            E7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 5:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            F7.Image = null;
                                            break;
                                        case 1://Torre negra
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            F7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 6:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            G7.Image = null;
                                            break;
                                        case 1://Torre negra
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            G7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 7:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            H7.Image = null;
                                            break;
                                        case 1://Torre negra
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            H7.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                            }
                            break;
                        case 7:
                            switch (C)//en este switch se localizan los espacion en las columnas
                            {
                                case 0:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            A8.Image = null;
                                            break;
                                        case 1://Torre negra
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            A8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 1:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            B8.Image = null;
                                            break;
                                        case 1://Torre negra
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            B8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 2:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            C8.Image = null;
                                            break;
                                        case 1://Torre negra
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            C8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 3:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            D8.Image = null;
                                            break;
                                        case 1://Torre negra
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            D8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 4:
                                   switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                   {
                                       case 0:
                                           E8.Image = null;
                                           break;
                                        case 1://Torre negra
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            E8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 5:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            F8.Image = null;
                                            break;
                                        case 1://Torre negra
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            F8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 6:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            G8.Image = null;
                                            break;
                                        case 1://Torre negra
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            G8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                                case 7:
                                    switch (matriz[F, C])// este switch analiza la pieza colocada en el lugar
                                    {
                                        case 0:
                                            H8.Image = null;
                                            break;
                                        case 1://Torre negra
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;
                                        case 2://caballo negro
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 3://arfil negro
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 4://reina negra
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Negra.png");
                                            break;
                                        case 5://rey negro
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey negro.png");
                                            break;
                                        case 6://arfil negro
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil negro 2.png");
                                            break;
                                        case 7://caballo negro
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo negro.png");
                                            break;
                                        case 8://torre negra
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre negra.png");
                                            break;

                                        case 11://peon negro
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 12://peon negro
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 13://peon negro
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 14://peon negro
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 15://peon negro
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 16://peon negro
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 17://peon negro
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;
                                        case 18://peon negro
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Negro.png");
                                            break;

                                        case 21://torre blanca
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;
                                        case 22://caballo blanco
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 23://arfil blanco
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 24://reina blanca
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Reina Blanca.png");
                                            break;
                                        case 25://rey blanco
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Rey Blanco.png");
                                            break;
                                        case 26://arfil blanco
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Arfil Blanco.png");
                                            break;
                                        case 27://caballo blanco
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Caballo Blanco.png");
                                            break;
                                        case 28://torre blanca
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Torre Blanca.png");
                                            break;

                                        case 31://peon blanco
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 32://peon blanco
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 33://peon blanco
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 34://peon blanco
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 35://peon blanco
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 36://peon blanco
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 37://peon blanco
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                        case 38://peon blanco
                                            H8.Image = System.Drawing.Image.FromFile("C:\\Gary 11-F\\Estructura de Datos\\Ajedrez\\Ajedrez\\Piezas\\Peon Blanco.png");
                                            break;
                                    }
                                    break;
                            }
                            break;
                    }
                }
            }
            JaqueN();

        }
        public void Limpiar()
        {
            //se limpian los valores de las selecciones en botones
            //valores de botones
            SA1 = 0; SA2 = 0; SA3 = 0; SA4 = 0; SA5 = 0; SA6 = 0; SA7 = 0; SA8 = 0; //Valores utilizados para comprobar si se dio clic antes en los botones de la columna A
            SB1 = 0; SB2 = 0; SB3 = 0; SB4 = 0; SB5 = 0; SB6 = 0; SB7 = 0; SB8 = 0; //Valores utilizados para comprobar si se dio clic antes en los botones de la columna B
            SC1 = 0; SC2 = 0; SC3 = 0; SC4 = 0; SC5 = 0; SC6 = 0; SC7 = 0; SC8 = 0; //Valores utilizados para comprobar si se dio clic antes en los botones de la columna C
            SD1 = 0; SD2 = 0; SD3 = 0; SD4 = 0; SD5 = 0; SD6 = 0; SD7 = 0; SD8 = 0; //Valores utilizados para comprobar si se dio clic antes en los botones de la columna D
            SE1 = 0; SE2 = 0; SE3 = 0; SE4 = 0; SE5 = 0; SE6 = 0; SE7 = 0; SE8 = 0; //Valores utilizados para comprobar si se dio clic antes en los botones de la columna E
            SF1 = 0; SF2 = 0; SF3 = 0; SF4 = 0; SF5 = 0; SF6 = 0; SF7 = 0; SF8 = 0; //Valores utilizados para comprobar si se dio clic antes en los botones de la columna F
            SG1 = 0; SG2 = 0; SG3 = 0; SG4 = 0; SG5 = 0; SG6 = 0; SG7 = 0; SG8 = 0; //Valores utilizados para comprobar si se dio clic antes en los botones de la columna G
            SH1 = 0; SH2 = 0; SH3 = 0; SH4 = 0; SH5 = 0; SH6 = 0; SH7 = 0; SH8 = 0; //Valores utilizados para comprobar si se dio clic antes en los botones de la columna H
            //valores de seleccion
            SeleccionB = 0;
            SeleccionN = 0;

            ERQ = 1;

            //se limpian los bordes
            A1.ForeColor = System.Drawing.Color.Black;
            A2.ForeColor = System.Drawing.Color.Black;
            A3.ForeColor = System.Drawing.Color.Black;
            A4.ForeColor = System.Drawing.Color.Black;
            A5.ForeColor = System.Drawing.Color.Black;
            A6.ForeColor = System.Drawing.Color.Black;
            A7.ForeColor = System.Drawing.Color.Black;
            A8.ForeColor = System.Drawing.Color.Black;

            B1.ForeColor = System.Drawing.Color.Black; 
            B2.ForeColor = System.Drawing.Color.Black; 
            B3.ForeColor = System.Drawing.Color.Black; 
            B4.ForeColor = System.Drawing.Color.Black; 
            B5.ForeColor = System.Drawing.Color.Black; 
            B6.ForeColor = System.Drawing.Color.Black; 
            B7.ForeColor = System.Drawing.Color.Black; 
            B8.ForeColor = System.Drawing.Color.Black; 

            C1.ForeColor = System.Drawing.Color.Black; 
            C2.ForeColor = System.Drawing.Color.Black; 
            C3.ForeColor = System.Drawing.Color.Black; 
            C4.ForeColor = System.Drawing.Color.Black; 
            C5.ForeColor = System.Drawing.Color.Black; 
            C6.ForeColor = System.Drawing.Color.Black; 
            C7.ForeColor = System.Drawing.Color.Black; 
            C8.ForeColor = System.Drawing.Color.Black; 

            D1.ForeColor = System.Drawing.Color.Black; 
            D2.ForeColor = System.Drawing.Color.Black; 
            D3.ForeColor = System.Drawing.Color.Black; 
            D4.ForeColor = System.Drawing.Color.Black; 
            D5.ForeColor = System.Drawing.Color.Black; 
            D6.ForeColor = System.Drawing.Color.Black; 
            D7.ForeColor = System.Drawing.Color.Black; 
            D8.ForeColor = System.Drawing.Color.Black; 

            E1.ForeColor = System.Drawing.Color.Black;
            E2.ForeColor = System.Drawing.Color.Black;
            E3.ForeColor = System.Drawing.Color.Black;
            E4.ForeColor = System.Drawing.Color.Black;
            E5.ForeColor = System.Drawing.Color.Black;
            E6.ForeColor = System.Drawing.Color.Black;
            E7.ForeColor = System.Drawing.Color.Black;
            E8.ForeColor = System.Drawing.Color.Black;

            F1.ForeColor = System.Drawing.Color.Black; 
            F2.ForeColor = System.Drawing.Color.Black; 
            F3.ForeColor = System.Drawing.Color.Black; 
            F4.ForeColor = System.Drawing.Color.Black; 
            F5.ForeColor = System.Drawing.Color.Black; 
            F6.ForeColor = System.Drawing.Color.Black;
            F7.ForeColor = System.Drawing.Color.Black;
            F8.ForeColor = System.Drawing.Color.Black;

            G1.ForeColor = System.Drawing.Color.Black;
            G2.ForeColor = System.Drawing.Color.Black;
            G3.ForeColor = System.Drawing.Color.Black;
            G4.ForeColor = System.Drawing.Color.Black;
            G5.ForeColor = System.Drawing.Color.Black;
            G6.ForeColor = System.Drawing.Color.Black;
            G7.ForeColor = System.Drawing.Color.Black;
            G8.ForeColor = System.Drawing.Color.Black;

            H1.ForeColor = System.Drawing.Color.Black;
            H2.ForeColor = System.Drawing.Color.Black;
            H3.ForeColor = System.Drawing.Color.Black;
            H4.ForeColor = System.Drawing.Color.Black;
            H5.ForeColor = System.Drawing.Color.Black;
            H6.ForeColor = System.Drawing.Color.Black;
            H7.ForeColor = System.Drawing.Color.Black;
            H8.ForeColor = System.Drawing.Color.Black;

        }
        public void JaqueN()
        {
            if (matriz2[FS, CS] == 2)
            {
                if (FNREY - 2 > 0)//casos para jaque con caballo
                {
                    if (CNREY - 1 > -1)//se comprueba que los valores no superen la matriz
                    {
                        if (matriz[FNREY - 2, CNREY - 1] == 22 || matriz[FNREY - 2, CNREY - 1] == 27)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                        {
                            MessageBox.Show("Jaque");
                        }
                    }
                    if (CNREY + 1 < 8)//se comprueba que los valores no superen la matriz
                    {
                        if (matriz[FNREY - 2, CNREY + 1] == 22 || matriz[FNREY - 2, CNREY + 1] == 27)
                        {
                            MessageBox.Show("Jaque");
                        }
                    }
                }
                if (FNREY + 2 < 8)
                {
                    if (CNREY - 1 > -1)//se comprueba que los valores no superen la matriz
                    {
                        if (matriz[FNREY + 2, CNREY - 1] == 22 || matriz[FNREY + 2, CNREY - 1] == 277)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                        {
                            MessageBox.Show("Jaque");
                        }
                    }
                    if (CNREY + 1 < 8)//se comprueba que los valores no superen la matriz
                    {
                        if (matriz[FNREY + 2, CNREY + 1] == 22 || matriz[FNREY + 2, CNREY + 1] == 2)
                        {
                            MessageBox.Show("Jaque");
                        }
                    }
                }
                if (CNREY - 2 > 0)
                {
                    if (FNREY - 1 > -1)//se comprueba que los valores no superen la matriz
                    {
                        if (matriz[FNREY - 1, CNREY + 2] == 22 || matriz[FNREY - 1, CNREY + 2] == 27)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                        {
                            MessageBox.Show("Jaque");
                        }
                    }
                    if (FNREY + 1 < 8)//se comprueba que los valores no superen la matriz
                    {
                        if (matriz[FNREY + 1, CNREY + 2] == 22 || matriz[FNREY + 1, CNREY + 2] == 27)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                        {
                            MessageBox.Show("Jaque");
                        }
                    }

                }
                if (CNREY + 2 < 8)
                {
                    if (FNREY - 1 > -1)//se comprueba que los valores no superen la matriz
                    {
                        if (matriz[FNREY - 1, CNREY - 2] == 22 || matriz[FNREY - 1, CNREY - 2] == 27)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                        {
                            MessageBox.Show("Jaque");
                        }
                    }
                    if (FNREY + 1 < 8)//se comprueba que los valores no superen la matriz
                    {
                        if (matriz[FNREY + 1, CNREY + 2] == 22 || matriz[FNREY + 1, CNREY + 2] == 27)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                        {
                            MessageBox.Show("Jaque");
                        }
                    }
                }
            }


            int J = 1;
            if (matriz[FS, CS] == 1 || matriz[FS, CS] == 8 || matriz[FS, CS] == 21 || matriz[FS, CS] == 28 || matriz[FS, CS] == 4 || matriz[FS, CS] == 24)
            {
                if (CNREY == CS && matriz2[FS, CS] == 2) //Analiza la posibilidad de haber realizado un movimiento en vertical
                {
                    if (FNREY < FS) // analiza si el movimiente es hacia adelante
                    {
                        for (int PV = FNREY; PV < FS; PV++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[PV, CNREY] != 0 && matriz[PV, CNREY] != 5) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                J = 0;//se asigna cero de manera que no es posible un movimiento
                            }
                        }
                        if (J == 1)// si es 1 se puede lograr un movimiento
                        {
                            MessageBox.Show("Jaque");
                        }
                    }
                    if (FNREY > FS)
                    {
                        for (int PV = FNREY; PV > FS; PV--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[PV, CNREY] != 0 && matriz[PV, CNREY] != 5) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                J = 0;//se asigna cero de manera que no es posible un movimiento
                            }
                        }
                        if (J == 1)// si es 1 se puede lograr un movimiento
                        {
                            MessageBox.Show("Jaque");
                        }
                    }
                }
                if (FNREY == FS && matriz2[FS, CS] == 2)
                {
                    if (CNREY < CS) // analiza si el movimiente es hacia la derecha
                    {
                        for (int PH = CNREY; PH < CS; PH++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[FNREY, PH] != 0 && matriz[FNREY, PH] != 5) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                J = 0;//se asigna cero de manera que no es posible un movimiento
                            }
                        }
                        if (J == 1)// si es 1 se puede lograr un movimiento
                        {

                            MessageBox.Show("Jaque");
                        }
                    }
                    if (CNREY > CS)// analiza si el movimiente es hacia la izquierda
                    {
                        for (int PH = CNREY; PH > CS; PH--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[FNREY, PH] != 0 && matriz[FNREY, PH] != 5) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                J = 0;//se asigna cero de manera que no es posible un movimiento
                            }
                        }
                        if (J == 1)// si es 1 se puede lograr un movimiento
                        {
                            MessageBox.Show("Jaque");
                        }
                    }
                }
            }
            if (matriz[FS, CS] == 3 || matriz[FS, CS] == 6 || matriz[FS, CS] == 23 || matriz[FS, CS] == 26 || matriz[FS, CS] == 4 || matriz[FS, CS] == 24 && matriz2[FS,CS] == 2)
            {
                int A1D1 = 0;
                if (FNREY < FS && CNREY < CS) // analiza si el movimiente es hacia adelante
                {
                    for (int CD1 = CNREY, FD1 = FNREY; CD1 <= CS && FD1 <= FS; CD1++, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                    {
                        if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                        {
                            A1D1 = 1;
                        }
                    }
                    for (int CD1 = CNREY+1, FD1 = FNREY+1; CD1 < CS && FD1 < FS; CD1++, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                    {

                        if (matriz[FD1, CD1] != 0 || matriz[FD1, CD1] != 23 || matriz[FD1, CD1] != 26  || matriz [FD1,CD1] != 24) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                        {
                            A1D1 = 0;
                            J = 0;
                        }

                    }
                    if (J == 1 && A1D1 == 1)// si es 1 se puede lograr un movimiento
                    {
                        MessageBox.Show("Jaque");
                    }
                }
                if (FP > FS && CP > CS) // analiza si el movimiente es hacia adelante
                {
                    for (int CD1 = CNREY, FD1 = FNREY; CD1 >= CS && FD1 >= FS; CD1--, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                    {

                        if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                        {
                            A1D1 = 1;
                        }

                    }
                    for (int CD1 = CNREY - 1, FD1 = FNREY - 1; CD1 > CS && FD1 > FS; CD1--, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                    {

                        if (matriz[FD1, CD1] != 0 || matriz[FD1, CD1] != 23 || matriz[FD1, CD1] != 26 || matriz[FD1, CD1] != 24) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                        {
                            A1D1 = 0;
                            J = 0;
                        }

                    }
                    if (J == 1 && A1D1 == 1)// si es 1 se puede lograr un movimiento
                    {
                        MessageBox.Show("Jaque");
                    }
                }
                if (FP < FS && CP > CS) // analiza si el movimiente es hacia adelante
                {
                    for (int CD1 = CNREY, FD1 = FNREY; CD1 <= CS && FD1 >= FS; CD1++, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                    {

                        if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                        {
                            A1D1 = 1;
                        }
                    }
                    for (int CD1 = CNREY + 1, FD1 = FNREY - 1; CD1 < CS && FD1 > FS; CD1++, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                    {

                        if (matriz[FD1, CD1] != 0 || matriz[FD1, CD1] != 23 || matriz[FD1, CD1] != 26 || matriz[FD1, CD1] != 24) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                        {
                            A1D1 = 0;
                            J = 0;
                        }

                    }
                    if (J == 1 && A1D1 == 1)// si es 1 se puede lograr un movimiento
                    {
                        MessageBox.Show("Jaque");
                    }
                }
                if (FP > FS && CP < CS) // analiza si el movimiente es hacia adelante
                {
                    for (int CD1 = CNREY, FD1 = FNREY; CD1 >= CS && FD1 <= FS; CD1--, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                    {

                        if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                        {
                            A1D1 = 1;
                        }
                    }
                    for (int CD1 = CNREY - 1, FD1 = FNREY + 1; CD1 > CS && FD1 < FS; CD1--, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                    {

                        if (matriz[FD1, CD1] != 0 || matriz[FD1, CD1] != 23 || matriz[FD1, CD1] != 26 || matriz[FD1, CD1] != 24) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                        {
                            A1D1 = 0;
                            J = 0;
                        }

                    }
                    if (J == 1 && A1D1 == 1)// si es 1 se puede lograr un movimiento
                    {
                        MessageBox.Show("Jaque");
                    }
                }
            }
            JaqueB();

        }
        public void JaqueB()
        {
            if (matriz2[FS, CS] == 1)
            {
                if (FNREY - 2 > 0)//casos para jaque con caballo
                {
                    if (CNREY - 1 > -1)//se comprueba que los valores no superen la matriz
                    {
                        if (matriz[FNREY - 2, CNREY - 1] == 22 || matriz[FNREY - 2, CNREY - 1] == 27)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                        {
                            MessageBox.Show("Jaque");
                        }
                    }
                    if (CNREY + 1 < 8)//se comprueba que los valores no superen la matriz
                    {
                        if (matriz[FNREY - 2, CNREY + 1] == 22 || matriz[FNREY - 2, CNREY + 1] == 27)
                        {
                            MessageBox.Show("Jaque");
                        }
                    }
                }
                if (FNREY + 2 < 8)
                {
                    if (CNREY - 1 > -1)//se comprueba que los valores no superen la matriz
                    {
                        if (matriz[FNREY + 2, CNREY - 1] == 22 || matriz[FNREY + 2, CNREY - 1] == 277)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                        {
                            MessageBox.Show("Jaque");
                        }
                    }
                    if (CNREY + 1 < 8)//se comprueba que los valores no superen la matriz
                    {
                        if (matriz[FNREY + 2, CNREY + 1] == 22 || matriz[FNREY + 2, CNREY + 1] == 2)
                        {
                            MessageBox.Show("Jaque");
                        }
                    }
                }
                if (CNREY - 2 > 0)
                {
                    if (FNREY - 1 > -1)//se comprueba que los valores no superen la matriz
                    {
                        if (matriz[FNREY - 1, CNREY + 2] == 22 || matriz[FNREY - 1, CNREY + 2] == 27)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                        {
                            MessageBox.Show("Jaque");
                        }
                    }
                    if (FNREY + 1 < 8)//se comprueba que los valores no superen la matriz
                    {
                        if (matriz[FNREY + 1, CNREY + 2] == 22 || matriz[FNREY + 1, CNREY + 2] == 27)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                        {
                            MessageBox.Show("Jaque");
                        }
                    }

                }
                if (CNREY + 2 < 8)
                {
                    if (FNREY - 1 > -1)//se comprueba que los valores no superen la matriz
                    {
                        if (matriz[FNREY - 1, CNREY - 2] == 22 || matriz[FNREY - 1, CNREY - 2] == 27)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                        {
                            MessageBox.Show("Jaque");
                        }
                    }
                    if (FNREY + 1 < 8)//se comprueba que los valores no superen la matriz
                    {
                        if (matriz[FNREY + 1, CNREY + 2] == 22 || matriz[FNREY + 1, CNREY + 2] == 27)//Se confirma si el movimiento del peon se realizo para comer y si hya pieza que comer
                        {
                            MessageBox.Show("Jaque");
                        }
                    }
                }
            }

            int JN = 1;
            if (matriz[FS, CS] == 1 || matriz[FS, CS] == 8 || matriz[FS, CS] == 21 || matriz[FS, CS] == 28 || matriz[FS, CS] == 4 || matriz[FS, CS] == 24)
            {
                if (CBREY == CS && matriz2[FS, CS] == 1) //Analiza la posibilidad de haber realizado un movimiento en vertical
                {
                    if (FBREY < FS) // analiza si el movimiente es hacia adelante
                    {
                        for (int PV = FBREY; PV < FS; PV++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[PV, CBREY] != 0 && matriz[PV, CBREY] != 25) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                JN = 0;//se asigna cero de manera que no es posible un movimiento
                            }
                        }
                        if (JN == 1)// si es 1 se puede lograr un movimiento
                        {
                            MessageBox.Show("JNaque");
                        }
                    }
                    if (FBREY > FS)
                    {
                        for (int PV = FBREY; PV > FS; PV--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[PV, CBREY] != 0 && matriz[PV, CBREY] != 25) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                JN = 0;//se asigna cero de manera que no es posible un movimiento
                            }
                        }
                        if (JN == 1)// si es 1 se puede lograr un movimiento
                        {
                            MessageBox.Show("JNaque");
                        }
                    }
                }
                if (FBREY == FS && matriz2[FS, CS] == 1)
                {
                    if (CBREY < CS) // analiza si el movimiente es hacia la derecha
                    {
                        for (int PH = CBREY; PH < CS; PH++) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[FBREY, PH] != 0 && matriz[FBREY, PH] != 25) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                JN = 0;//se asigna cero de manera que no es posible un movimiento
                            }
                        }
                        if (JN == 1)// si es 1 se puede lograr un movimiento
                        {

                            MessageBox.Show("JNaque");
                        }
                    }
                    if (CBREY > CS)// analiza si el movimiente es hacia la izquierda
                    {
                        for (int PH = CBREY; PH > CS; PH--) // analiza los espacios con cero que hay hacia adelante de la torre
                        {
                            if (matriz[FBREY, PH] != 0 && matriz[FBREY, PH] != 25) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                            {
                                JN = 0;//se asigna cero de manera que no es posible un movimiento
                            }
                        }
                        if (JN == 1)// si es 1 se puede lograr un movimiento
                        {
                            MessageBox.Show("JNaque");
                        }
                    }
                }
            }
            if (matriz[FS, CS] == 3 || matriz[FS, CS] == 6 || matriz[FS, CS] == 23 || matriz[FS, CS] == 26 || matriz[FS, CS] == 4 || matriz[FS, CS] == 24 && matriz2[FS, CS] == 1)
            {
                int A1D2 = 0;
                if (FBREY < FS && CBREY < CS) // analiza si el movimiente es hacia adelante
                {
                    for (int CD1 = CBREY, FD1 = FBREY; CD1 <= CS && FD1 <= FS; CD1++, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                    {

                        if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                        {
                            A1D2 = 1;
                        }
                    }
                    for (int CD1 = CBREY + 1, FD1 = FBREY + 1; CD1 < CS && FD1 < FS; CD1++, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                    {

                        if (matriz[FD1, CD1] != 0 || matriz[FD1, CD1] != 3 || matriz[FD1, CD1] != 6 || matriz[FD1, CD1] != 4) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                        {
                            A1D2 = 0;
                            JN = 0;
                        }

                    }
                    if (JN == 1 && A1D2 == 1)// si es 1 se puede lograr un movimiento
                    {
                        MessageBox.Show("JNaque");
                    }
                }
                if (FP > FS && CP > CS) // analiza si el movimiente es hacia adelante
                {
                    for (int CD1 = CBREY, FD1 = FBREY; CD1 >= CS && FD1 >= FS; CD1--, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                    {
                        if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                        {
                            A1D2 = 1;
                        }

                    }
                    for (int CD1 = CBREY - 1, FD1 = FBREY - 1; CD1 > CS && FD1 > FS; CD1--, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                    {

                        if (matriz[FD1, CD1] != 0 || matriz[FD1, CD1] != 3 || matriz[FD1, CD1] != 6 || matriz[FD1, CD1] != 4) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                        {
                            A1D2 = 0;
                            JN = 0;
                        }

                    }
                    if (JN == 1 && A1D2 == 1)// si es 1 se puede lograr un movimiento
                    {
                        MessageBox.Show("JNaque");
                    }
                }
                if (FP < FS && CP > CS) // analiza si el movimiente es hacia adelante
                {
                    for (int CD1 = CBREY, FD1 = FBREY; CD1 <= CS && FD1 >= FS; CD1++, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                    {

                        if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                        {
                            A1D2 = 1;
                        }
                    }
                    for (int CD1 = CBREY + 1, FD1 = FBREY - 1; CD1 < CS && FD1 > FS; CD1++, FD1--) // analiza los espacios con cero que hay hacia adelante de la torre
                    {

                        if (matriz[FD1, CD1] != 0 || matriz[FD1, CD1] != 3 || matriz[FD1, CD1] != 6 || matriz[FD1, CD1] != 4) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                        {
                            A1D2 = 0;
                            JN = 0;
                        }

                    }
                    if (JN == 1 && A1D2 == 1)// si es 1 se puede lograr un movimiento
                    {
                        MessageBox.Show("JNaque");
                    }
                }
                if (FP > FS && CP < CS) // analiza si el movimiente es hacia adelante
                {
                    for (int CD1 = CBREY, FD1 = FBREY; CD1 >= CS && FD1 <= FS; CD1--, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                    {

                        if (CD1 == CS && FD1 == FS) //analiza si el movimiento que se realiza es en la misma diagonal
                        {
                            A1D2 = 1;
                        }

                    }
                    for (int CD1 = CBREY - 1, FD1 = FBREY + 1; CD1 > CS && FD1 < FS; CD1--, FD1++) // analiza los espacios con cero que hay hacia adelante de la torre
                    {

                        if (matriz[FD1, CD1] != 0 || matriz[FD1, CD1] != 3 || matriz[FD1, CD1] != 6 || matriz[FD1, CD1] != 4) //aniliza si la posicion de la matriz en comparacion de la posicion entre la posicion inicial de la matriz y la posicion secundaria hay numeros de valor 0
                        {
                            A1D2 = 0;
                            JN = 0;
                        }

                    }
                    if (JN == 1 && A1D2 == 1)// si es 1 se puede lograr un movimiento
                    {
                        MessageBox.Show("JNaque");
                    }
                }
            }
            int PA = 0;
            for (int c = 0; c < 8; c++)
            {
                for (int f = 0; f < 8; f++)
                {
                    if (matriz[f, c] == 5)
                    {
                        PA++;
                    }
                    if (matriz[f, c] == 25)
                    {
                        PA++;
                    }
                }
            }
            if (PA == 1)
            {
                MessageBox.Show("Jaque Mate");
            }
        }

        private void A8_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SA8 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 7;//se registra la fila
                        CS = 0;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 7;//se registra la fila
                        CP = 0;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SA8 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            A8.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SA8 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 7;//se registra la fila
                        CS = 0;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 7;//se registra la fila
                        CP = 0;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SA8 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            A8.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void A7_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SA7 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 6;//se registra la fila
                        CS = 0;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {

                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 6;//se registra la fila
                        CP = 0;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SA7 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            A7.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otraz piea");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SA7 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 6;//se registra la fila
                        CS = 0;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {

                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 6;//se registra la fila
                        CP = 0;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SA7 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            A7.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void A6_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SA6 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 5;//se registra la fila
                        CS = 0;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {

                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 5;//se registra la fila
                        CP = 0;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SA6 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            A6.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otraz piea");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SA6 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 5;//se registra la fila
                        CS = 0;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {

                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 5;//se registra la fila
                        CP = 0;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SA6 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            A6.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void A5_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SA5 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 4;//se registra la fila
                        CS = 0;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 4;//se registra la fila
                        CP = 0;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SA5 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            A5.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SA5 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 4;//se registra la fila
                        CS = 0;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 4;//se registra la fila
                        CP = 0;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SA5 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            A5.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void A4_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SA4 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 3;//se registra la fila
                        CS = 0;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 3;//se registra la fila
                        CP = 0;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SA4 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            A4.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SA4 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 3;//se registra la fila
                        CS = 0;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 3;//se registra la fila
                        CP = 0;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SA4 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            A4.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void A3_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SA3 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 2;//se registra la fila
                        CS = 0;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 2;//se registra la fila
                        CP = 0;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SA3 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            A3.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SA3 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 2;//se registra la fila
                        CS = 0;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {

                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 2;//se registra la fila
                        CP = 0;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SA3 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            A3.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void A2_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SA2 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 1;//se registra la fila
                        CS = 0;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 1;//se registra la fila
                        CP = 0;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SA2 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            A2.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SA2 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 1;//se registra la fila
                        CS = 0;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {

                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 1;//se registra la fila
                        CP = 0;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SA2 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            A2.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void A1_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SA1 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 0;//se registra la fila
                        CS = 0;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 0;//se registra la fila
                        CP = 0;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SA1 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            A1.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SA1 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 0;//se registra la fila
                        CS = 0;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {

                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 0;//se registra la fila
                        CP = 0;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SA1 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            A1.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }

        private void B8_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SB8 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 7;//se registra la fila
                        CS = 1;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 7;//se registra la fila
                        CP = 1;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SB8 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            B8.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SB8 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 7;//se registra la fila
                        CS = 1;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 7;//se registra la fila
                        CP = 1;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SB8 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            B8.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void B7_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SB7 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 6;//se registra la fila
                        CS = 1;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 6;//se registra la fila
                        CP = 1;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SB7 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            B7.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SB7 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 6;//se registra la fila
                        CS = 1;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 6;//se registra la fila
                        CP = 1;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SB7 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            B7.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void B6_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SB6 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 5;//se registra la fila
                        CS = 1;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 5;//se registra la fila
                        CP = 1;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SB6 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            B6.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SB6 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 5;//se registra la fila
                        CS = 1;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 5;//se registra la fila
                        CP = 1;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SB6 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            B6.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void B5_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SB5 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 4;//se registra la fila
                        CS = 1;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 4;//se registra la fila
                        CP = 1;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SB5 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            B5.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SB5 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 4;//se registra la fila
                        CS = 1;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 4;//se registra la fila
                        CP = 1;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SB5 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            B5.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void B4_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SB4 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 3;//se registra la fila
                        CS = 1;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 3;//se registra la fila
                        CP = 1;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SB4 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            B4.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SB4 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 3;//se registra la fila
                        CS = 1;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 3;//se registra la fila
                        CP = 1;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SB4 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            B4.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void B3_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SB3 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 2;//se registra la fila
                        CS = 1;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 2;//se registra la fila
                        CP = 1;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SB3 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            B3.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SB3 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 2;//se registra la fila
                        CS = 1;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 2;//se registra la fila
                        CP = 1;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SB3 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            B3.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void B2_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SB2 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 1;//se registra la fila
                        CS = 1;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 1;//se registra la fila
                        CP = 1;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SB2 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            B2.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SB2 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 1;//se registra la fila
                        CS = 1;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 1;//se registra la fila
                        CP = 1;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SB2 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            B2.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void B1_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SB1 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 0;//se registra la fila
                        CS = 1;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 0;//se registra la fila
                        CP = 1;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SB1 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            B1.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SB1 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 0;//se registra la fila
                        CS = 1;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 0;//se registra la fila
                        CP = 1;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SB1 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            B1.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }

        private void C8_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SC8 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 7;//se registra la fila
                        CS = 2;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 7;//se registra la fila
                        CP = 2;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SC8 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            C8.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SC8 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 7;//se registra la fila
                        CS = 2;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 7;//se registra la fila
                        CP = 2;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SC8 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            C8.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void C7_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SC7 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 6;//se registra la fila
                        CS = 2 ;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 6;//se registra la fila
                        CP = 2 ;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SC7 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            C7.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SC7 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 6;//se registra la fila
                        CS = 2 ;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 6;//se registra la fila
                        CP = 2 ;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SC7 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            C7.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void C6_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SC6 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 5;//se registra la fila
                        CS = 2 ;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 5;//se registra la fila
                        CP = 2 ;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SC6 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            C6.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SC6 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 5;//se registra la fila
                        CS = 2 ;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 5;//se registra la fila
                        CP = 2 ;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SC6 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            C6.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void C5_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SC5 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 4;//se registra la fila
                        CS = 2 ;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 4;//se registra la fila
                        CP = 2 ;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SC5 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            C5.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SC5 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 4;//se registra la fila
                        CS = 2 ;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 4;//se registra la fila
                        CP = 2 ;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SC5 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            C5.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void C4_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SC4 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 3;//se registra la fila
                        CS = 2 ;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 3;//se registra la fila
                        CP = 2 ;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SC4 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            C4.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SC4 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 3;//se registra la fila
                        CS = 2 ;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 3;//se registra la fila
                        CP = 2 ;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SC4 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            C4.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void C3_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SC3 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 2;//se registra la fila
                        CS = 2 ;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 2;//se registra la fila
                        CP = 2 ;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SC3 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            C3.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SC3 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 2;//se registra la fila
                        CS = 2 ;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 2;//se registra la fila
                        CP = 2 ;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SC3 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            C3.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void C2_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SC2 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 1;//se registra la fila
                        CS = 2 ;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 1;//se registra la fila
                        CP = 2 ;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SC2 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            C2.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SC2 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 1;//se registra la fila
                        CS = 2 ;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 1;//se registra la fila
                        CP = 2 ;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SC2 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            C2.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void C1_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SC1 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 0;//se registra la fila
                        CS = 2 ;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 0;//se registra la fila
                        CP = 2 ;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SC1 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            C1.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SC1 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 0;//se registra la fila
                        CS = 2 ;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 0;//se registra la fila
                        CP = 2 ;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SC1 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            C1.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }

        private void D8_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SD8 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 7;//se registra la fila
                        CS = 3;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 7;//se registra la fila
                        CP = 3;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SD8 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            D8.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SD8 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 7;//se registra la fila
                        CS = 3;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 7;//se registra la fila
                        CP = 3;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SD8 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            D8.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void D7_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SD7 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 6;//se registra la fila
                        CS = 3;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 6;//se registra la fila
                        CP = 3;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SD7 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            D7.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SD7 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 6;//se registra la fila
                        CS = 3;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 6;//se registra la fila
                        CP = 3;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SD7 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            D7.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void D6_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SD6 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 5;//se registra la fila
                        CS = 3;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 5;//se registra la fila
                        CP = 3;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SD6 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            D6.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SD6 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 5;//se registra la fila
                        CS = 3;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 5;//se registra la fila
                        CP = 3;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SD6 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            D6.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void D5_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SD5 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 4;//se registra la fila
                        CS = 3;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 4;//se registra la fila
                        CP = 3;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SD5 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            D5.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SD5 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 4;//se registra la fila
                        CS = 3;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 4;//se registra la fila
                        CP = 3;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SD5 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            D5.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void D4_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SD4 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 3;//se registra la fila
                        CS = 3;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 3;//se registra la fila
                        CP = 3;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SD4 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            D4.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SD4 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 3;//se registra la fila
                        CS = 3;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 3;//se registra la fila
                        CP = 3;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SD4 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            D4.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void D3_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SD3 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 2;//se registra la fila
                        CS = 3;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 2;//se registra la fila
                        CP = 3;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SD3 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            D3.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SD3 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 2;//se registra la fila
                        CS = 3;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 2;//se registra la fila
                        CP = 3;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SD3 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            D3.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void D2_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SD2 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 1;//se registra la fila
                        CS = 3;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 1;//se registra la fila
                        CP = 3;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SD2 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            D2.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SD2 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 1;//se registra la fila
                        CS = 3;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 1;//se registra la fila
                        CP = 3;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SD2 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            D2.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void D1_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SD1 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 0;//se registra la fila
                        CS = 3;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 0;//se registra la fila
                        CP = 3;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SD1 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            D1.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SD1 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 0;//se registra la fila
                        CS = 3;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 0;//se registra la fila
                        CP = 3;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SD1 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            D1.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }

        private void E8_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SE8 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 7;//se registra la fila
                        CS = 4;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 7;//se registra la fila
                        CP = 4;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SE8 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            E8.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SE8 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 7;//se registra la fila
                        CS = 4;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 7;//se registra la fila
                        CP = 4;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SE8 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            E8.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void E7_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SE7 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 6;//se registra la fila
                        CS = 4;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 6;//se registra la fila
                        CP = 4;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SE7 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            E7.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SE7 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 6;//se registra la fila
                        CS = 4;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 6;//se registra la fila
                        CP = 4;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SE7 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            E7.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void E6_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SE6 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 5;//se registra la fila
                        CS = 4;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 5;//se registra la fila
                        CP = 4;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SE6 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            E6.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SE6 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 5;//se registra la fila
                        CS = 4;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 5;//se registra la fila
                        CP = 4;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SE6 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            E6.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void E5_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SE5 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 4;//se registra la fila
                        CS = 4;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 4;//se registra la fila
                        CP = 4;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SE5 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            E5.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SE5 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 4;//se registra la fila
                        CS = 4;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 4;//se registra la fila
                        CP = 4;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SE5 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            E5.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void E4_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SE4 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 3;//se registra la fila
                        CS = 4;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 3;//se registra la fila
                        CP = 4;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SE4 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            E4.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SE4 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 3;//se registra la fila
                        CS = 4;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 3;//se registra la fila
                        CP = 4;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SE4 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            E4.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void E3_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SE3 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 2;//se registra la fila
                        CS = 4;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 2;//se registra la fila
                        CP = 4;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SE3 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            E3.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SE3 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 2;//se registra la fila
                        CS = 4;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 2;//se registra la fila
                        CP = 4;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SE3 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            E3.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void E2_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SE2 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 1;//se registra la fila
                        CS = 4;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 1;//se registra la fila
                        CP = 4;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SE2 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            E2.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SE2 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 1;//se registra la fila
                        CS = 4;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 1;//se registra la fila
                        CP = 4;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SE2 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            E2.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void E1_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SE1 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 0;//se registra la fila
                        CS = 4;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 0;//se registra la fila
                        CP = 4;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SE1 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            E1.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SE1 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 0;//se registra la fila
                        CS = 4;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 0;//se registra la fila
                        CP = 4;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SE1 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            E1.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
       
        private void F8_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SF8 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 7;//se registra la fila
                        CS = 5;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 7;//se registra la fila
                        CP = 5;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SF8 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            F8.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SF8 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 7;//se registra la fila
                        CS = 5;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 7;//se registra la fila
                        CP = 5;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SF8 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            F8.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void F7_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SF7 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 6;//se registra la fila
                        CS = 5;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 6;//se registra la fila
                        CP = 5;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SF7 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            F7.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SF7 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 6;//se registra la fila
                        CS = 5;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 6;//se registra la fila
                        CP = 5;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SF7 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            F7.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void F6_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SF6 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 5;//se registra la fila
                        CS = 5;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 5;//se registra la fila
                        CP = 5;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SF6 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            F6.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SF6 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 5;//se registra la fila
                        CS = 5;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 5;//se registra la fila
                        CP = 5;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SF6 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            F6.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void F5_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SF5 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 4;//se registra la fila
                        CS = 5;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 4;//se registra la fila
                        CP = 5;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SF5 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            F5.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SF5 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 4;//se registra la fila
                        CS = 5;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 4;//se registra la fila
                        CP = 5;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SF5 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            F5.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void F4_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SF4 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 3;//se registra la fila
                        CS = 5;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 3;//se registra la fila
                        CP = 5;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SF4 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            F4.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SF4 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 3;//se registra la fila
                        CS = 5;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 3;//se registra la fila
                        CP = 5;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SF4 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            F4.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void F3_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SF3 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 2;//se registra la fila
                        CS = 5;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 2;//se registra la fila
                        CP = 5;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SF3 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            F3.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SF3 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 2;//se registra la fila
                        CS = 5;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 2;//se registra la fila
                        CP = 5;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SF3 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            F3.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void F2_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SF2 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 1;//se registra la fila
                        CS = 5;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 1;//se registra la fila
                        CP = 5;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SF2 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            F2.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SF2 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 1;//se registra la fila
                        CS = 5;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 1;//se registra la fila
                        CP = 5;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SF2 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            F2.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void F1_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SF1 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 0;//se registra la fila
                        CS = 5;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 0;//se registra la fila
                        CP = 5;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SF1 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            F1.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SF1 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 0;//se registra la fila
                        CS = 5;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 0;//se registra la fila
                        CP = 5;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SF1 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            F1.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }

        private void G8_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SG8 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 7;//se registra la fila
                        CS = 6;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 7;//se registra la fila
                        CP = 6;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SG8 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            G8.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SG8 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 7;//se registra la fila
                        CS = 6;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 7;//se registra la fila
                        CP = 6;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SG8 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            G8.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void G7_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SG7 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 6;//se registra la fila
                        CS = 6;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 6;//se registra la fila
                        CP = 6;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SG7 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            G7.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SG7 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 6;//se registra la fila
                        CS = 6;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 6;//se registra la fila
                        CP = 6;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SG7 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            G7.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void G6_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SG6 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 5;//se registra la fila
                        CS = 6;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 5;//se registra la fila
                        CP = 6;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SG6 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            G6.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SG6 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 5;//se registra la fila
                        CS = 6;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 5;//se registra la fila
                        CP = 6;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SG6 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            G6.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void G5_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SG5 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 4;//se registra la fila
                        CS = 6;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 4;//se registra la fila
                        CP = 6;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SG5 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            G5.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SG5 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 4;//se registra la fila
                        CS = 6;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 4;//se registra la fila
                        CP = 6;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SG5 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            G5.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void G4_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SG4 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 3;//se registra la fila
                        CS = 6;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 3;//se registra la fila
                        CP = 6;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SG4 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            G4.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SG4 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 3;//se registra la fila
                        CS = 6;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 3;//se registra la fila
                        CP = 6;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SG4 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            G4.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void G3_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SG3 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 2;//se registra la fila
                        CS = 6;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 2;//se registra la fila
                        CP = 6;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SG3 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            G3.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SG3 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 2;//se registra la fila
                        CS = 6;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 2;//se registra la fila
                        CP = 6;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SG3 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            G3.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void G2_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SG2 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 1;//se registra la fila
                        CS = 6;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 1;//se registra la fila
                        CP = 6;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SG2 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            G2.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SG2 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 1;//se registra la fila
                        CS = 6;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 1;//se registra la fila
                        CP = 6;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SG2 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            G2.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void G1_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SG1 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 0;//se registra la fila
                        CS = 6;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 0;//se registra la fila
                        CP = 6;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SG1 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            G1.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SG1 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 0;//se registra la fila
                        CS = 6;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 0;//se registra la fila
                        CP = 6;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SG1 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            G1.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }

        private void H8_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SH8 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 7;//se registra la fila
                        CS = 7;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 7;//se registra la fila
                        CP = 7;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SH8 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            H8.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SH8 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 7;//se registra la fila
                        CS = 7;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 7;//se registra la fila
                        CP = 7;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SH8 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            H8.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void H7_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SH7 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 6;//se registra la fila
                        CS = 7;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 6;//se registra la fila
                        CP = 7;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SH7 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            H7.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SH7 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 6;//se registra la fila
                        CS = 7;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 6;//se registra la fila
                        CP = 7;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SH7 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            H7.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void H6_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SH6 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 5;//se registra la fila
                        CS = 7;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 5;//se registra la fila
                        CP = 7;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SH6 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            H6.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SH6 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 5;//se registra la fila
                        CS = 7;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 5;//se registra la fila
                        CP = 7;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SH6 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            H6.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void H5_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SH5 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 4;//se registra la fila
                        CS = 7;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 4;//se registra la fila
                        CP = 7;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SH5 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            H5.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SH5 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 4;//se registra la fila
                        CS = 7;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 4;//se registra la fila
                        CP = 7;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SH5 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            H5.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void H4_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SH4 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 3;//se registra la fila
                        CS = 7;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 3;//se registra la fila
                        CP = 7;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SH4 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            H4.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SH4 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 3;//se registra la fila
                        CS = 7;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 3;//se registra la fila
                        CP = 7;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SH4 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            H4.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void H3_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SH3 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 2;//se registra la fila
                        CS = 7;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 2;//se registra la fila
                        CP = 7;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SH3 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            H3.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SH3 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 2;//se registra la fila
                        CS = 7;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 2;//se registra la fila
                        CP = 7;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SH3 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            H3.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void H2_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SH2 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 1;//se registra la fila
                        CS = 7;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 1;//se registra la fila
                        CP = 7;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SH2 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            H2.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SH2 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 1;//se registra la fila
                        CS = 7;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 1;//se registra la fila
                        CP = 7;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SH2 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            H2.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        }
        private void H1_Click(object sender, EventArgs e)
        {
            if (Turno == 1)//turno de los blancos
            {
                if (SH1 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionB == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 0;//se registra la fila
                        CS = 7;//se registra la columna
                        if (matriz2[FS, CS] != 2 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 1)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 0;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionB == 1)//si se tiene un movimiento invalido se evita el cambio de turno
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si no hay movimiento invalido se limpian las variables
                            {
                                Turno = 1;//se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 0;//se registra la fila
                        CP = 7;//se registra la columna

                        if (matriz2[FP, CP] == 2)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SH1 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionB = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            H1.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los blancos porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
            else// en caso de que el turno no sea 1 entonces sera turno de los negros
            {
                if (SH1 == 0)//numero de veces seleccionado este boton
                {
                    if (SeleccionN == 1)//si se viene de otro boton se realiza el movimiento
                    {
                        FS = 0;//se registra la fila
                        CS = 7;//se registra la columna
                        if (matriz2[FS, CS] != 1 && matriz2[FS, CS] == 0 || matriz2[FS, CS] == 2)//se se va a comer y es una pieza del mismo color se va a evitar el movimiento
                        {
                            Turno = 1;//se cambia de turno
                            Comprobar();//se realiza el analisis para los movimientos
                            if (SeleccionN == 1)//comprueba si se realizo el movimiento
                            {
                                Limpiar();//y se limpian las variables
                            }
                            else//si se realizo el movimiento se procede a limpiar las variables
                            {
                                Turno = 0;//de no ser asi se regresa el turno
                                Limpiar();//se limpian las variables
                            }
                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("No puedes comer tus propias piezas");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                    else//si se selecciona el boton por primera vez para un posterior movimiento
                    {
                        FP = 0;//se registra la fila
                        CP = 7;//se registra la columna

                        if (matriz2[FP, CP] == 1)//se comprueba que la pieza seleccionada sea la correspondiente al turno
                        {
                            SH1 = 1;//se registra la variable para evitar que se entre en movimiento estando en el mismo boton
                            SeleccionN = 1;// se cambia la seleccion para que a la hora de realizar el movimiento se pueda entrar a la zona de seleccion
                            H1.ForeColor = System.Drawing.Color.Yellow;//se cambia el color de los bordes de l boton simbolizando que se esta seleccionando ese espacio

                        }
                        else//si no es la correspondiente se limpian las variables y se muestra un mensaje para el usuario
                        {
                            Limpiar();// se envia a la funcion de la limpieza de las variables 
                            MessageBox.Show("Es turno de los negros porfavor seleccione otra pieza");//se muestra un mensaje al usuario para que seleccione otra pieza
                        }
                    }
                }
                else//si se ha seleccionado este boton con anterioridad se entra aca para limpiar la variables
                {
                    Limpiar();//se envia a la funcion que limpia las variables
                }
            }
        a}
    }
}